package com.webcon.sus.activities;


import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.webcon.sus.adapter.RVAlarmListAdapter;
import com.webcon.sus.demo.R;
import com.webcon.sus.entity.AlarmNode;
import com.webcon.sus.eventObjects.MessageEvent;
import com.webcon.sus.eventObjects.ServiceEvent;
import com.webcon.sus.utils.SUConstant;
import com.webcon.wp.utils.WPApplication;

import java.util.List;

import de.greenrobot.event.EventBus;

/**
 * 主界面消息列表页面
 * @author m
 */
public class AlarmMainFragment extends Fragment {

    private Context mContext;
    private LinearLayout linear_container;
    private TextView tv_empty;

    // RecyclerLayout
    private RecyclerView mRecyclerView;
    private LinearLayoutManager mRecyclerManager;
    private RVAlarmListAdapter mAdapter;

    private boolean initialized = false;
    private boolean isWaiting = true;

    //------------------
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EventBus.getDefault().register(this);
        init();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.fragment_alarm_main, container, false);
        //列表
        mRecyclerView = (RecyclerView)layout.findViewById(R.id.recycler_alarms);
        mRecyclerView.setHasFixedSize(true);
        mRecyclerManager = new LinearLayoutManager(mContext);
        mRecyclerView.setLayoutManager(mRecyclerManager);
        mRecyclerView.setItemAnimator(new DefaultItemAnimator());
//        mRecyclerView.addItemDecoration(new ListItemDecoration());
        //组件
        tv_empty = (TextView) layout.findViewById(R.id.tv_empty);
        linear_container = (LinearLayout) layout.findViewById(R.id.linear_alarm_container);

        if(!initialized){
            EventBus.getDefault().post(new ServiceEvent(ServiceEvent.SERVICE_EVENT_INIT_ALARM_REQ));
        }
        return layout;
    }

    private void init() {
        mContext = getActivity();
        //初始化时，从本地获取之前的报警消息>>保存到DB的情况下。。
        //....（略）...则需要先初始化ListView
    }

    private void initAdapter(){
        mAdapter = new RVAlarmListAdapter(getAlarmList());
        mAdapter.setOnItemClickListener(mRVListener);
        mRecyclerView.setAdapter(mAdapter);
    }

    private void refreshFragment() {
        if (isWaiting) {
            isWaiting = false;
        }
        if (mAdapter == null) {
            initAdapter();
            checkAndRefresh(getAlarmList().size());
        } else {
            refreshAdapter();
        }
    }

    private void refreshAdapter() {
        checkAndRefresh(getAlarmList().size());
        WPApplication.getInstance().refreshAlarmList();
        mAdapter.notifyDataSetChanged();
    }

    private void checkAndRefresh(int size) {
        if (size > 0) {
            linear_container.setVisibility(View.VISIBLE);
            tv_empty.setVisibility(View.GONE);
        } else {
            linear_container.setVisibility(View.GONE);
            tv_empty.setVisibility(View.VISIBLE);
        }
    }

    /**
     * 列表项监听器
     */
    private RVAlarmListAdapter.OnAlarmItemClickListener mRVListener
            = new RVAlarmListAdapter.OnAlarmItemClickListener() {
        @Override
        public void onItemClick(View view, int position) {
            Bundle bundle = new Bundle();
            AlarmNode alarm = getAlarmList().get(position);
                /* 跳转标识 flag
                 * 0:程序未启动的情况下从登陆页面直接跳转
                 * 1:点击报警列表跳转
                 * 2:程序在启动状态下点击通知跳转 */
            bundle.putInt(AlarmDetailsActivityCompat.ALARM_DETAIL_FLAG, SUConstant.APP_RUNNING_M);
            // 保留字段（推送的报警信息里会有，获取的默认填0）
            bundle.putInt(AlarmDetailsActivityCompat.ALARM_DETAIL_TEMP, 0);
            // 报警信息对象
            bundle.putSerializable(AlarmDetailsActivityCompat.ALARM_DETAIL_DATA, alarm);

            // 跳转到报警信息详细页面
            Intent intent = new Intent(mContext, AlarmDetailsActivityCompat.class);
            intent.putExtras(bundle);
            mContext.startActivity(intent);
        }

        @Override
        public void onItemLongClick(View view, int position) {
            // 本来用于选项的批量删除处理，但是不实现了
        }
    };

    private List<AlarmNode> getAlarmList() {
        return WPApplication.getInstance().getAllAlarmList();
    }

    /**
     * view点击事件
     */
    View.OnClickListener clickListener = new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            // ...
        }
    };



    @Override
    public void onDestroy() {
        EventBus.getDefault().unregister(this);
        super.onDestroy();
    }


    public void onBackPressed() {
    }


    @Override
    public void onPause() {
        super.onPause();
    }

    public void onEventMainThread(MessageEvent event) {
        refreshFragment();
        initialized = true;
    }


}
