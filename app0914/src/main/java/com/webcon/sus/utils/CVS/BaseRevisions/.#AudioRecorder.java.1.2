package com.webcon.sus.utils;

import android.media.AudioRecord;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import vieboo.test.record.utils.IRecordData;
import vieboo.test.record.utils.TransferDecoding;

/**
 * 录音工具
 * @author m
 */
public class AudioRecorder {
    private static final String TAG = "AudioRecorder";
    private FileOutputStream fos;			//文件输出流
    private AudioRecord mAudioRecord;		//录音工具

    private final int bufferSize = AudioUtils.RECORD_BUFFER_SIZE;  //录音数组的长度
    private byte[] buffer;                  //原始录音保存的short数组
    private boolean isRecording = false;    //正在录音标识
    private int applyType;                  //应用类型，本地/网络
    private TransferDecoding mEncoder;      //编码工具
    private IRecordData callback;           //回调接口，用于网络

    //------------------------------------------
    public AudioRecorder(IRecordData callback) {
        if(callback == null){
            //本地
            applyType = AudioUtils.APPLY_TYPE_LOCAL;
        }else{
            //网络
            this.callback = callback;
            applyType = AudioUtils.APPLY_TYPE_ONLINE;
        }
        init();
    }

    private void init(){
        buffer = new byte[bufferSize];
        createFile();
        initRecorder();
    }

    private void createFile(){
        File file = new File(AudioUtils.WAV_FILE);
        if(file.exists()){
            file.delete();
        }
        try {
            file.createNewFile();
            //打开输出流
            fos = new FileOutputStream(file);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 初始化
     */
    private void initRecorder(){
        //初始化编码库
        mEncoder = new TransferDecoding();
        mEncoder.g722_encoder_init(AudioUtils.BITRATE, AudioUtils.SAMEPLE_RATE_HZ);
        //获得录音缓冲区
        int recordBufferSize = AudioRecord.getMinBufferSize(
                AudioUtils.SAMEPLE_RATE_HZ, AudioUtils.CHANNEL_CONFIG, AudioUtils.AUDIO_FORMAT);
        //获得录音对象
        mAudioRecord = new AudioRecord(
                AudioUtils.AUDIO_SOURCE, AudioUtils.SAMEPLE_RATE_HZ,
                AudioUtils.CHANNEL_CONFIG, AudioUtils.AUDIO_FORMAT, recordBufferSize * 10);
    }


    //--------------------------------------
    public void start(){
        if(isRecording){
            return;
        }
        isRecording = true;
        new RecordThread().start();
    }

    public void stop(){
        isRecording = false;
    }

    private void release(){
        mAudioRecord.stop();
        mAudioRecord.release();
        mAudioRecord = null;
        mEncoder.g722_encoder_release();
        try {
            fos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    //-------------------------------
    private void execute(byte[] buffer, int length){
        //数据处理
        byte[] newData = new byte[length];
        int enLength = mEncoder.g722_encoder(newData, buffer, length);
        byte[] enData = new byte[enLength];
        System.arraycopy(newData, 0, enData, 0, enLength);
        //保存到本地，或者发送到网络
        if(applyType == AudioUtils.APPLY_TYPE_LOCAL){
            try {
                fos.write(enData, 0, enLength);
                fos.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }else if (applyType == AudioUtils.APPLY_TYPE_ONLINE && callback != null){
            callback.onRecordData(enData, enLength);
        }
    }

    //--------------------------
    /**
     * 录音线程
     *
     */
    class RecordThread extends Thread{
        @Override
        public void run(){
            if(mAudioRecord == null){
                release();
            }
            //开始录音
            mAudioRecord.startRecording();
            int length = 0;
            try{
                while(isRecording){
                    length = mAudioRecord.read(buffer, 0, bufferSize);
                    execute(buffer, length);
                }
            }finally {
                release();
            }
        }
    }
}
