package test1.nh.com.demos1.fragments;import android.app.Activity;import android.content.Context;import android.os.Bundle;import android.support.v4.app.Fragment;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.TextView;import java.util.ArrayList;import java.util.Collections;import java.util.List;import test1.nh.com.demos1.R;import test1.nh.com.demos1.activities.DrawerActivity;/** * Created by Administrator on 15-9-30. */public class MultiThreadFrag extends Fragment {    private Context mContext;    TextView tv1, tv2, tv3, tv4;    TextView tv5, tv6, tv7, tv8;    Button brun;    CurrentLightOnHolder lightOnHolder;    /**     * The fragment argument representing the section number for this     * fragment.     */    private static final String ARG_SECTION_NUMBER = "section_number";    //empty constructor    public MultiThreadFrag() {    }    /**     * Returns a new instance of this fragment for the given section     * number.     */    public static MultiThreadFrag newInstance(int sectionNumber) {        MultiThreadFrag fragment = new MultiThreadFrag();        Bundle args = new Bundle();        args.putInt(ARG_SECTION_NUMBER, sectionNumber);        fragment.setArguments(args);        return fragment;    }    //---producer consumer model------    private class Store {        public Store(int stock) {            this.stock = stock;        }        private int stock;        public synchronized int getStock() {            return stock;        }        public synchronized void produce() {            stock++;        }        public synchronized void consume() {            stock--;        }        public synchronized void dowait() {            try {                this.wait();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        public synchronized void donotify() {            this.notify();        }    }    Store store = new Store(1);    private Runnable producer = new Runnable() {        @Override        public void run() {            while (true) {                if (store.getStock()<20) {                    store.produce();                    store.donotify();                }                else {                    store.dowait();                }                try {                    Thread.sleep(567);                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        }    };    private Runnable consumer = new Runnable() {        @Override        public void run() {            while (true) {                if (store.getStock()>15) {                    store.consume();                    store.donotify();                } else  {                    store.dowait();                }                try {                    Thread.sleep(1234);                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        }    };    TextView c_p_tv;    //---dead lock demo---    public class DeadLockDemo{        Object lockA=new Object();        Object lockB=new Object();        public void print1(){            Log.i("deadlock","1:...");            synchronized (lockA){                Log.i("deadlock","1:--AAA--");                try {                    Thread.sleep(500);                } catch (InterruptedException e) {                    e.printStackTrace();                }                synchronized (lockB){                    Log.i("deadlock","1:--BBB--");                }            }        }        public void print2(){            Log.i("deadlock","2:...");            synchronized (lockB){                Log.i("deadlock","2:--BBB--");                try {                    Thread.sleep(500);                } catch (InterruptedException e) {                    e.printStackTrace();                }                synchronized (lockA){                    Log.i("deadlock","2:--AAA--");                }            }        }    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // get section id from intent        // getArg--return the Bundle//        int section_number=getArguments().getInt(ARG_SECTION_NUMBER);        View rootView = inflater.inflate(R.layout.fragment_multithread_drawer, container, false);        // dead lock--demo---        final DeadLockDemo dlock1=new DeadLockDemo();        new Thread( ){            @Override            public void run() {                dlock1.print1();            }        }.start();        new Thread( ){            @Override            public void run() {                dlock1.print2();            }        }.start();        // consumer-producer model        c_p_tv = (TextView) rootView.findViewById(R.id.c_p_tv);        new Thread(producer).start();new Thread(consumer).start();        new Thread(new Runnable(){            @Override            public void run() {                while(true) {                    final int currentStock = store.getStock();                    c_p_tv.post(new Runnable() {                        @Override                        public void run() {                            c_p_tv.setText("当前stock:" + currentStock);                        }                    });                    try {                        Thread.sleep(50);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }            }        }).start();        //---------test of wait--notify----        tv1 = (TextView) rootView.findViewById(R.id.thread_tv1);        tv2 = (TextView) rootView.findViewById(R.id.thread_tv2);        tv3 = (TextView) rootView.findViewById(R.id.thread_tv3);        tv4 = (TextView) rootView.findViewById(R.id.thread_tv4);        tv5 = (TextView) rootView.findViewById(R.id.thread_tv5);        tv6 = (TextView) rootView.findViewById(R.id.thread_tv6);        tv7 = (TextView) rootView.findViewById(R.id.thread_tv7);        tv8 = (TextView) rootView.findViewById(R.id.thread_tv8);        initLights();        lightOnHolder = new CurrentLightOnHolder(LIGHT1);        final Thread thread1 = new Thread(new ControlRunnable(LIGHT1, lightOnHolder, tv1));        final Thread thread2 = new Thread(new ControlRunnable(LIGHT2, lightOnHolder, tv2));        final Thread thread3 = new Thread(new ControlRunnable(LIGHT3, lightOnHolder, tv3));        final Thread thread4 = new Thread(new ControlRunnable(LIGHT4, lightOnHolder, tv4));        thread1.start();        thread2.start();        thread3.start();        thread4.start();        //----display threads states        new Thread(new Runnable() {            @Override            public void run() {                while (true) {                    tv5.post(new Runnable() {                        @Override                        public void run() {                            tv5.setText(thread1.getState().toString());                        }                    });                    tv6.post(new Runnable() {                        @Override                        public void run() {                            tv6.setText(thread2.getState().toString());                        }                    });                    tv7.post(new Runnable() {                        @Override                        public void run() {                            tv7.setText(thread3.getState().toString());                        }                    });                    tv8.post(new Runnable() {                        @Override                        public void run() {                            tv8.setText(thread4.getState().toString());                        }                    });                    try {                        Thread.sleep(50);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }            }        }).start();        brun = (Button) rootView.findViewById(R.id.thread_B1);        brun.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {            }        });        return rootView;    }    //-----------------test of wait--notify------------------------    private class CurrentLightOnHolder {        public CurrentLightOnHolder(int lightOn) {            this.lightOn = lightOn;        }        int lightOn;        public synchronized void setLightOn(int a) {            this.lightOn = a;        }        public synchronized int getLightOn() {            return this.lightOn;        }        public synchronized void doWait() {            synchronized (this) {                try {                    this.wait();                } catch (InterruptedException e) {                }            }        }        public void doNotify() {            synchronized (this) {                this.notifyAll();            }        }    }    private List<Integer> lights = new ArrayList();    private void initLights() {        lights.add(LIGHT1);        lights.add(LIGHT2);        lights.add(LIGHT3);        lights.add(LIGHT4);    }    private void setRandomLight() {        Collections.shuffle(lights);        lightOnHolder.setLightOn(lights.get(0));    }    private static final int LIGHT1 = 1;    private static final int LIGHT2 = 2;    private static final int LIGHT3 = 3;    private static final int LIGHT4 = 4;    private class ControlRunnable implements Runnable {        public ControlRunnable(int target_light, CurrentLightOnHolder lightOnHolder, TextView tv) {            this.target_light = target_light;            this.lightOnHolder = lightOnHolder;            this.tv = tv;        }        private final int target_light;        private CurrentLightOnHolder lightOnHolder;        private TextView tv;        @Override        public void run() {//            // method 1 --- while loop--> this is equivalent to busy waiting...//            while(true){//                if(lightOnHolder.getLightOn()==this.target_light){//                    tv.post(new Runnable() {//                        @Override//                        public void run() {//                            tv.setBackgroundColor(getResources().getColor(R.color.Red300));//                        }//                    });////                    try {//                        Thread.sleep(1000);//                    } catch (InterruptedException e) {//                        e.printStackTrace();//                    }////                    tv.post(new Runnable() {//                        @Override//                        public void run() {//                            tv.setBackgroundColor(getResources().getColor(R.color.Teal300));//                        }//                    });////                    setRandomLight();//                }//            }////----------// method 2          ------wait------notify-------            while (true) {                Log.i("AAA", "thread:" + target_light + " running...");                if (lightOnHolder.getLightOn() == this.target_light) {                    tv.post(new Runnable() {                        @Override                        public void run() {                            tv.setBackgroundColor(getResources().getColor(R.color.Red300));                        }                    });                    try {                        Thread.sleep(5000);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    tv.post(new Runnable() {                        @Override                        public void run() {                            tv.setBackgroundColor(getResources().getColor(R.color.Teal300));                        }                    });                    setRandomLight();                    Log.i("AAA", "thread:" + target_light + " notifying...");                    lightOnHolder.doNotify();                } else {                    lightOnHolder.doWait();                }            }        }    }    //-------------end of test of wait--notify------------------------    @Override    public void onAttach(Activity activity) {        super.onAttach(activity);        try {    //  called by DrawerActivity            ((DrawerActivity) activity).onSectionAttached(                    getArguments().getInt(ARG_SECTION_NUMBER));        } catch (Exception e) {            e.printStackTrace();//            Log.i("AAA", "Fragment called not by DrawerActivity");        }        mContext = activity;    }}