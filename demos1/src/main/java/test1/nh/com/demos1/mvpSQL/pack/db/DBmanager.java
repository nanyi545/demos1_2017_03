package test1.nh.com.demos1.mvpSQL.pack.db;import android.content.Context;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;import android.util.Log;import java.util.List;import java.util.concurrent.Callable;import javax.inject.Inject;import rx.Observable;import rx.Subscriber;import rx.schedulers.Schedulers;import test1.nh.com.demos1.utils.sqlite.Person4DB;/** * Created by Administrator on 16-1-4. * * SQLite management : http://beust.com/weblog/2015/06/01/easy-sqlite-on-android-with-rxjava/ * * ContactTable is responsible for "contact" table * */public class DBmanager extends SQLiteOpenHelper {    private static final String DATABASE_NAME = "sqliteDemo.db";    private static int DATABASE_VER = 1;    public static final String TABLE_NAME = "contacts";    private SQLiteDatabase db;    @Inject    protected ContactTable contactTable;    public DBmanager(Context context) {        super(context, DATABASE_NAME, null, DATABASE_VER);//The first time this is called, the database will be opened and  onCreate,onUpgrade and/or onOpen will be called.        db = getWritableDatabase();//        contactTable=new ContactTable();    }    // --called when the db is created at the first time---    @Override    public void onCreate(SQLiteDatabase db) {        db.execSQL("create table " + TABLE_NAME +                " (id integer primary key autoincrement, name text,age integer)"        );    }    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {    }    // to generate observables--> to be further processed to specify working thread and then send out    private <T> Observable<T> makeObservable(final Callable<T> func) {        return Observable.create(                new Observable.OnSubscribe<T>() {                    @Override                    public void call(Subscriber<? super T> subscriber) {                        try {                            subscriber.onNext(func.call());                        } catch (Exception ex) {                            Log.e("AAA", "Error database operation", ex);                        }                    }                });    }    public Observable<List<Person4DB>> getPersonsObs() {        return makeObservable(contactTable.getPersonsCallable(db))                // note: do not use Schedulers.io()-->why? // below method set getPersons() to be on worker thread-->RxComputationThreadPool-1                .subscribeOn(Schedulers.io());   //  Schedulers.computation()  or   Schedulers.io()//              .subscribeOn(AndroidSchedulers.mainThread()); // - on UI thread // Main    }    public Observable<Long> getAddObs(final Person4DB p1) {        return makeObservable(contactTable.addPersonCallable(p1,db))                .subscribeOn(Schedulers.computation());  // set addPerson on worker thread    }}