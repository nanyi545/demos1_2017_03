package com.webcon.sus.activities;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.res.Resources;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.NonNull;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.hikvision.netsdk.HCNetSDK;
import com.webcon.sus.demo.R;
import com.webcon.sus.entity.BaseDevice;
import com.webcon.sus.entity.MonitorNode;
import com.webcon.sus.entity.StationNode;
import com.webcon.sus.eventObjects.MonitorEvent;
import com.webcon.sus.media.SelfVideoDataBuffer2;
import com.webcon.sus.utils.AudioUtils;
import com.webcon.sus.utils.CommunicationUtils;
import com.webcon.sus.utils.IVideoCallback;
import com.webcon.sus.utils.SUConstant;
import com.webcon.wp.utils.ApplicationManager;
import com.webcon.wp.utils.PublicMethodUtil;
import com.webcon.wp.utils.WPApplication;

import org.MediaPlayer.PlayM4.Player;

import java.util.Timer;
import java.util.TimerTask;

import de.greenrobot.event.EventBus;
import vieboo.test.record.utils.IRecordData;

/**
 * 视频预览界面
 * <p>包括监控视频预览，云台控制，语音喊话等</p>
 * @author m
 */
public class MonitorActivityCompat extends BaseActivity implements View.OnClickListener,
        View.OnTouchListener, IRecordData, IVideoCallback, SurfaceHolder.Callback{

    private static final String TAG = "Mornitor";
    private static final int WAITING_TIME = 10000;   //20000
    private static int mPlayerPort = 0;
    private final int bg_on     = R.drawable.selector_monitor_voice;
    private final int bg_off    = R.drawable.selector_monitor_voice_2;
    private final int bg_ctrl   = R.drawable.selector_monitor_controller;
    private final int tx_show   = R.color.monitor_text;
    private final int tx_dim    = R.color.monitor_text_dim;
    private final int tx_on     = R.color.monitor_text_on;
    private final boolean DEBUG = WPApplication.DEBUG;

    private Context mContext;
    private int stationId;
    private String deviceId;
    private MonitorNode mDevice;

    private Player mPlayer;
    private AudioUtils mAudioUtils;
    private SelfVideoDataBuffer2 mAudioBuffer;

    private SurfaceView mSurfaceView;
    /** 退出按钮 */
    private ImageButton bn_quit;
    /** 增减控制按钮容器 */
    private LinearLayout linear_controller;
    /** 摄像头移动表盘 */
    private RelativeLayout rl_menu;
    /** 报警语音列表 */
    private ListView mTrackListView;
    private ArrayAdapter<Integer> mTrackAdapter;
    private boolean haveTrackList = false;

    private Button bn_track, bn_speaker, bn_openMenu, bn_closeMenu,
            bn_move_up, bn_move_down, bn_move_right, bn_move_left,
            bn_sharp, bn_zoom, bn_aperture, bn_increase, bn_decrease;
    private boolean isMenu, isControl, isTracking, isSpeaking;
    private int ptzType = -1;
    private Button temp;
    private int color_show, color_dim, color_on;

    private ProgressDialog mLoading;
    private Timer mTimer;

    /* ----------------- */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        initData(getIntent());
        initView();
    }

    @Override
    public void onResume(){
        super.onResume();
        initResume();
    }

    private void initData(Intent intent){
        Bundle bundle = intent.getExtras();
        if(bundle == null){
            errorQuit(1001);
            finish();
        }else{
            stationId = bundle.getInt(MainStationListFragment.KEY_ID, -1);
            deviceId = bundle.getString(StationDevicesFragment.KEY_DEVICE, "");
            if(stationId == -1 || deviceId.equals("")){
                errorQuit(1002);
                finish();
            }
        }
        StationNode node = WPApplication.getInstance().getStationNode(stationId);
        if(node != null){
            if(stationId != node.getId()){
                errorQuit(1003);
                finish();
            }
            for(BaseDevice n : node.getDeviceList()){
                if(n.getID().equals(deviceId)){
                    if(n instanceof MonitorNode){
                        mDevice = (MonitorNode) n;
                    }else{
                        errorQuit(6001);
                        finish();
                    }
                    break;
                }
            }
            int tracks = node.getRecordSum();
            if(tracks > 0){
                Integer[] ll = new Integer[tracks];
                for(int i = 0; i < tracks; i++){
                    ll[i] = i + 1;
                }
                mTrackAdapter = new ArrayAdapter<>(this, R.layout.list_item_track, ll);
                haveTrackList = true;
            }else{
                haveTrackList = false;
            }
        } else{
            return;
        }
        mTimer = new Timer();
        mAudioBuffer = SelfVideoDataBuffer2.getVideoDataBuffer();
        EventBus.getDefault().register(this);
    }

    private void initView() {
        // 切换成横屏
        if (getRequestedOrientation() != ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        }
        // 全屏显示
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        // 保持屏幕常亮
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        mContext = this;
        setContentView(R.layout.layout_monitor_compat);
        mSurfaceView = (SurfaceView) findViewById(R.id.monitor_surface);
        mSurfaceView.getHolder().addCallback(this);

        // 报警语音列表
        mTrackListView = (ListView)findViewById(R.id.list_monitor_tracklist);
        mTrackListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                if (DEBUG) {
                    Log.i(TAG, "click track item:" + position);
                }
                new Thread(new RequestRunnable(SUConstant.SUB_REQUEST_ALARM_PLAYER, position + 1)).start();
                hideTrackList();
                isTracking = false;
                switchBackground(bn_track, getString(R.string.str_monitor_select_track), bg_on, color_show);
            }
        });
        mTrackListView.setAdapter(mTrackAdapter);
        initButton();

        ApplicationManager.getInstance().addActivity(this);
    }

    private void initResume(){
        //加载等待对话框
        mLoading = PublicMethodUtil.getInstance().makeProgressDialog(
                mContext, R.string.str_null, R.string.str_monitoringvideo_loading_loadvideo, false, true,
                new DialogInterface.OnKeyListener() {
                    @Override
                    public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
                        if(event.getAction() == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_BACK){
                            quit(0);
                            return true;
                        }else{
                            return false;
                        }
                    }
                }
        );
        mLoading.setCanceledOnTouchOutside(false);
        showLoading();
        // 请求视频(10s)后无数据关闭当前请求页面
        mTimer.schedule(new RequestFailedTask(), WAITING_TIME);
        //录音工具
        mAudioUtils = new AudioUtils(this);
    }

    private void initButton(){
        //退出按钮
        bn_quit = (ImageButton) findViewById(R.id.monitor_quit);
        bn_quit.setOnClickListener(this);

        linear_controller = (LinearLayout)findViewById(R.id.linear_monitor_list_controller);
        rl_menu = (RelativeLayout)findViewById(R.id.monitor_ptz_menu);

        bn_track        = (Button)findViewById(R.id.bn_monitor_track);
        bn_speaker      = (Button)findViewById(R.id.bn_monitor_speaker);
        bn_openMenu     = (Button)findViewById(R.id.bn_monitor_menu);
        bn_closeMenu    = (Button)findViewById(R.id.bn_monitor_ptz_move);
        bn_move_up      = (Button)findViewById(R.id.bn_monitor_ptz_move_up);
        bn_move_down    = (Button)findViewById(R.id.bn_monitor_ptz_move_down);
        bn_move_right   = (Button)findViewById(R.id.bn_monitor_ptz_move_right);
        bn_move_left    = (Button)findViewById(R.id.bn_monitor_ptz_move_left);
        bn_sharp        = (Button)findViewById(R.id.bn_monitor_sharp);
        bn_zoom         = (Button)findViewById(R.id.bn_monitor_zoom);
        bn_aperture     = (Button)findViewById(R.id.bn_monitor_aperture);
        bn_increase     = (Button)findViewById(R.id.bn_monitor_increase);
        bn_decrease     = (Button)findViewById(R.id.bn_monitor_decrease);

        bn_track.setOnClickListener(this);
        bn_speaker.setOnClickListener(this);
        bn_openMenu.setOnClickListener(this);
        bn_closeMenu.setOnClickListener(this);
        bn_sharp.setOnClickListener(this);
        bn_zoom.setOnClickListener(this);
        bn_aperture.setOnClickListener(this);

        bn_move_up.setOnTouchListener(this);
        bn_move_down.setOnTouchListener(this);
        bn_move_left.setOnTouchListener(this);
        bn_move_right.setOnTouchListener(this);
        bn_increase.setOnTouchListener(this);
        bn_decrease.setOnTouchListener(this);

        Resources res = getResources();
        color_dim = res.getColor(tx_dim);
        color_on = res.getColor(tx_on);
        color_show = res.getColor(tx_show);
    }


    /**
     * 初始化播放库
     */
    private boolean initPlayerSDK() {
        mPlayer = Player.getInstance();
        if (mPlayer == null) {
            quit(-3);
            return false;
        }
        mPlayerPort = mPlayer.getPort();
        if (!mPlayer.setStreamOpenMode(mPlayerPort, Player.STREAM_REALTIME)) {
            quit(-3);
            return false;
        }
        return true;
    }

    /**
     * 监控视频页面的Handler
     * <p>用于关闭dialog、以及显示错误原因</p>
     */
    Handler monitorVideoHandler = new Handler() {

        @Override
        public void handleMessage(Message msg) {
            closeLoading();
            switch (msg.what) {
                case 10:
                    break;
                case -1:
                    showToast(mContext, R.string.str_monitoringvideo_toast_loadvideofaild);
                    break;
                case -2:
                    showToast(mContext, R.string.str_monitoringvideo_toast_flowused_f);
                    break;
                case -3:
                    showToast(mContext, R.string.str_monitoringvideo_toast_flowused_g);
                    break;
                case -4:
                    showToast(mContext, R.string.str_monitoringvideo_toast_flowused_h);
                    break;
                case -5:
                    showToast(mContext, R.string.str_monitoringvideo_toast_flowused_i);
                    break;
                default:
                    break;
            }
        }
    };

    @Override
    public void releaseHandler(){
        monitorVideoHandler.removeCallbacksAndMessages(null);
        monitorVideoHandler = null;
    }

    /**
     * 开启Loading对话框
     */
    private void showLoading(){
        if(WPApplication.DEBUG){
            return;
        }
        if(mLoading != null && !mLoading.isShowing()){
            mLoading.show();
        }
    }

    /**
     * 退出处理
     * <p>主要包括关闭Loading的处理</p>
     */
    private void quit(int what){
        monitorVideoHandler.sendEmptyMessage(what);
        quit();
    }

    /**
     * 退出
     */
    private void quit() {
        finish();
    }

    /**
     * 清理资源
     * <p>主要是释放资源、清理线程、发送关闭请求等，不涉及UI处理</p>
     */
    private void release(){
        isTracking = false;
        isSpeaking = false;
        closeLoading();
        clearTimer();
        releaseResource();
        // 向监控端发送停止视频请求
        new Thread(new RequestRunnable(SUConstant.SUB_REQUEST_STOP_PREVIEW, 0)).start();
    }

    /**
     * 关闭Loading对话框
     */
    private void closeLoading() {
        if (mLoading != null) {
            if(mLoading.isShowing()){
                mLoading.dismiss();
            }
            mLoading.cancel();
            mLoading = null;
        }
    }

    /**
     * 资源释放
     */
    private void releaseResource() {
        if(mPlayer != null){
            mPlayer.stop(mPlayerPort);
            mPlayer.closeStream(mPlayerPort);
            mPlayer.freePort(mPlayerPort);
            mPlayer = null;
        }

        mAudioUtils.release();
        EventBus.getDefault().unregister(this);
        CommunicationUtils.getInstance().unregisterVideoCallback();
    }

    /**
     * 清理计时器
     */
    private void clearTimer(){
        if(mTimer != null){
            mTimer.purge();
            mTimer.cancel();
        }
    }

    /* ------------- listview ---------------- */

    /**
     * 显示警告语音列表
     */
    private void showTrackList(){
        isTracking = true;
        mTrackListView.setVisibility(View.VISIBLE);
        switchBackground(bn_track, getString(R.string.str_monitor_close_select), bg_off, color_on);
    }

    /**
     * 关闭警告语音列表
     */
    private void hideTrackList(){
        isTracking = false;
        mTrackListView.setVisibility(View.GONE);
        switchBackground(bn_track, getString(R.string.str_monitor_select_track), bg_on, color_show);
    }

    /**
     * 切换按钮显示
     * @param v bn_track，bn_speakder者两个
     * @param str 显示的文字
     * @param srcId 按钮背景
     * @param textColor 字体颜色
     */
    private void switchBackground(View v, String str, int srcId, int textColor){
        ((TextView)v).setText(str);
        ((TextView)v).setTextColor(textColor);
        v.setBackgroundResource(srcId);
    }

    /* ------------- button --------------- */

    /**
     * 处理云台控制按钮的Touch事件
     * @param type pdu类型
     * @param event touch事件
     */
    private void perform(int type, MotionEvent event){
        switch (event.getAction()){
            // 按下，发送开始请求
            case MotionEvent.ACTION_DOWN:
                if (DEBUG) {
                    Log.i(TAG, "touch down");
                }
                new Thread(new RequestPtzRunnable(type, true)).start();
                break;
            // 撤销或放开，发送停止请求
            case MotionEvent.ACTION_CANCEL:
            case MotionEvent.ACTION_UP:
                if (DEBUG) {
                    Log.i(TAG, "touch up");
                }
                new Thread(new RequestPtzRunnable(type, false)).start();
                break;
        }
    }

    /**
     * 检查增减控制按钮容器的状态，并做相应的处理
     * @param v 包括bn_sharp，bn_zoom，bn_aperture
     */
    private void detectController(View v){
        if(isControl){
            if(ptzType != getPtzType(v) && temp != null){
                switchController(v);
            }else{
                closeController(v);
            }
        }else{
            openController(v);
        }
    }

    /**
     * 打开增减控制
     * @param v 当前选中的功能键
     */
    private void openController(View v){
        temp = (Button)v;
        temp.setTextColor(color_show);
        temp.setBackgroundResource(bg_ctrl);
        linear_controller.setVisibility(View.VISIBLE);
        isControl = true;
        ptzType = getPtzType(v);
    }

    /**
     * 增减控制在打开的情况下，切换功能键按钮的显示
     * @param v 当前选中的功能键
     */
    private void switchController(View v){
        temp.setTextColor(color_dim);
        temp.setBackgroundResource(bg_on);
        temp = (Button)v;
        temp.setTextColor(color_show);
        temp.setBackgroundResource(bg_ctrl);
        ptzType = getPtzType(v);
    }

    /**
     * 关闭增减控制
     * @param v 当前选中的功能键
     */
    private void closeController(View v){
        ((TextView)v).setTextColor(color_dim);
        v.setBackgroundResource(bg_on);
        temp = null;
        ptzType = getPtzType(null);
        linear_controller.setVisibility(View.GONE);
        isControl = false;
    }

    /**
     * 根据功能键生成相应的子Pdu类型
     * @param v 包括bn_sharp，bn_zoom，bn_aperture
     */
    private int getPtzType(View v){
        int ret = -1;
        if(v == bn_sharp){
            ret = SUConstant.PTZ_FOCUS_SHARPNESS_DECREASE;
        }else if(v == bn_zoom){
            ret = SUConstant.PTZ_FOCUS_ZOOM_DECREASE;
        }else if(v == bn_aperture){
            ret = SUConstant.PTZ_APERTURE_SHRINK;
        }
        return ret;
    }

    /* --------------------- surface view ----------------------- */
    /* onCreate -> onResume -> surfaceCreated */
    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        //初始化播放库
        initPlayerSDK();
        //向通信库注册回调监听，用于回调视频数据
        CommunicationUtils.getInstance().registerVideoCallback(this);
        //发送预览请求
        new Thread(new RequestRunnable(SUConstant.SUB_REQUEST_START_PREVIEW, 0)).start();
    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
    }

    @Override
    public boolean dispatchKeyEvent(@NonNull KeyEvent event) {
        if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0){
            if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
                // 在播放列表打开的情况下，拦截退出事件
                if(isTracking){
                    hideTrackList();
                    return true;
                }
            }
        }
        return super.dispatchKeyEvent(event);
    }

    @Override
    public void onPause(){
        release();
        mAudioBuffer.clearOldData();
        super.onPause();
    }

    @Override
    public void onDestroy(){
        super.onDestroy();
    }

    @Override
    public boolean onKeyDown(int keyCode, @NonNull KeyEvent event) {
        if (event.getAction() == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_BACK) {
            quit(0);
        }
        return super.onKeyDown(keyCode, event);
    }


    @Override
    public boolean onTouch(View v, MotionEvent event) {
        if(bn_move_up == v){
            perform(SUConstant.PTZ_UP, event);
        }else if(bn_move_down == v){
            perform(SUConstant.PTZ_DOWN, event);
        }else if(bn_move_left == v){
            perform(SUConstant.PTZ_LEFT, event);
        }else if(bn_move_right == v){
            perform(SUConstant.PTZ_RIGHT, event);
        }else if(bn_decrease == v){
            if (ptzType != -1) {
                perform(ptzType, event);
            }
        }else if(bn_increase == v) {
            if (ptzType != -1) {
                perform(ptzType + 1, event);
            }
        }
        return false;
    }

    @Override
    public void onClick(View v) {
        // 退出按钮//语音//云台控制
        if(v == bn_quit){
            // loading显示的时候也点击不了，就不处理loading了
            quit();
        }else if(bn_track == v && haveTrackList){
            if(!isSpeaking){
                if(!isTracking){
                    showTrackList();
                }else{
                    hideTrackList();
                }
            }
        }else if(bn_speaker == v){
            if(!isTracking){
                if(!isSpeaking){
                    mAudioUtils.startRecord();
                    isSpeaking = true;
                    new Thread(new SendVoiceRunnable()).start();
                    switchBackground(v, getString(R.string.str_monitor_close_speak), bg_off, color_on);
                }else{
                    mAudioUtils.stopRecord();
                    isSpeaking = false;
                    switchBackground(v, getString(R.string.str_monitor_open_speak), bg_on, color_show);
                }
            }
        }else if(bn_openMenu == v){
            if(!isMenu){
                v.setVisibility(View.GONE);
                rl_menu.setVisibility(View.VISIBLE);
                isMenu = !isMenu;
            }
        }else if(bn_closeMenu == v){
            if(isMenu){
                bn_openMenu.setVisibility(View.VISIBLE);
                rl_menu.setVisibility(View.GONE);
                isMenu = !isMenu;
            }
        }else if(bn_sharp == v){
            detectController(v);
        }else if(bn_zoom == v){
            detectController(v);
        }else if(bn_aperture == v){
            detectController(v);
        }

    }

    //语音回调：本地工具->接口->发送
    @Override
    public void onRecordData(byte[] data, int length){
        if(mAudioBuffer != null){
            mAudioBuffer.enQueue(data);
        }
    }

    @Override
    public void onData(int iDataType, byte[] pDataBuffer, int iDataSize) {
        //FIXME：也可能不是按数据类型区分
        switch (iDataType){
            //系统头
            case HCNetSDK.NET_DVR_SYSHEAD:
                //清除等待计时器
                clearTimer();
                if(iDataSize > 0){
                    mPlayer.openStream(mPlayerPort, pDataBuffer, iDataSize, 1024 * 800);
                    mPlayer.setDisplayBuf(mPlayerPort, 15);
                    mPlayer.play(mPlayerPort, mSurfaceView.getHolder());
                    break;
                }
                // 发送一个msg通知UI线程关闭Progressdialog
                monitorVideoHandler.sendEmptyMessage(10);
                break;
            case HCNetSDK.NET_DVR_STREAMDATA: //码流数据
                if(iDataSize > 0){
                    if(!mPlayer.inputData(mPlayerPort, pDataBuffer, iDataSize)){
                        break;
                    }
                }
                break;
            default:
                break;
        }
    }

    public void onEventMainThread(MonitorEvent event){
        //TODO: ##设备掉线、用户被挤下线
        switch (event.getType()){
            case MonitorEvent.MONITOR_EXCEPTION_QUIT:
                mSurfaceView.setBackgroundColor(Color.BLACK);
                monitorVideoHandler.sendEmptyMessage(-99);
                quit();
                break;
            case MonitorEvent.MONITOR_EXCEPTION_LINE:
                AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
                builder.setTitle("警告");
                builder.setMessage("设备网络异常，请稍后重新预览！");
                builder.setPositiveButton("退出",
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                quit();
                            }
                        });
                builder.create().show();
                break;
            default:
                break;
        }
    }

    /* ------------------ Thread ---------------------------- */

    /**
     * 发送语音线程
     */
    private class SendVoiceRunnable implements Runnable{
        byte[] data;

        @Override
        public void run(){
            while(isSpeaking){
                data = mAudioBuffer.deQueue();
                if(data != null){
                    CommunicationUtils.getInstance().sendVoice(stationId, deviceId, data, data.length);
                }else {
                    try {
                        // NOTE: 腾出空闲时间片
                        Thread.sleep(30);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    if(DEBUG){
                        Log.e(TAG, "voice data is null");
                    }
                }

            }
            if(DEBUG){
                Log.e(TAG, "-------------------------------stop send voice thread-----------------");
            }
            mAudioBuffer.clearOldData();
        }
    }

    private class RequestPtzRunnable implements Runnable {
        private int type;
        private boolean state;
        public RequestPtzRunnable(int type, boolean state){
            this.type = type;
            this.state = state;
        }

        @Override
        public void run(){
            if(!WPApplication.DEBUG_NO_PTZ){
                if(DEBUG){
                    Log.i(TAG, "request ptz");
                }
                CommunicationUtils.getInstance().requestPtz(stationId, deviceId, type, state);
            }
        }
    }

    /**
     * 请求线程，包括：播放警告、开始预览、停止预览
     */
    private class RequestRunnable implements Runnable{
        private short pdu = 0;
        private int extra = 0;

        public RequestRunnable(short pdu, int extra){
            this.pdu = pdu;
            this.extra = extra;
        }

        @Override
        public void run(){
            if(DEBUG){
                Log.i(TAG, "RequestRunnable>> device");
            }
            byte[] req = CommunicationUtils.getInstance().createRequestSys(pdu, stationId, deviceId, extra);
            int ret = -1;
            int count = 0;
            int limited = 1;
            if(pdu == SUConstant.SUB_REQUEST_STOP_PREVIEW){
                limited = 5;
            }
            while (ret != 0 && count++ < limited) {
                ret = CommunicationUtils.getInstance().requestPtzDevice(SUConstant.PDU_C_CLI_REQ_WIN, req);
            }

            if(ret < 0){
                switch(pdu){
                    case SUConstant.SUB_REQUEST_START_PREVIEW:
                        quit(-4);
                        break;
                    case SUConstant.SUB_REQUEST_STOP_PREVIEW:
                        break;
                    case SUConstant.SUB_REQUEST_ALARM_PLAYER:
                        monitorVideoHandler.sendEmptyMessage(-5);
                        break;
                    default:
                        break;
                }
            }
        }
    }

    /**
     * 请求视频失败(超时)，退出当前页面
     */
    private class RequestFailedTask extends TimerTask {
        @Override
        public void run() {
            //TODO: 退出页面处理。。。。
            if(!DEBUG){
                quit(-2);
            }
        }
    }

}
