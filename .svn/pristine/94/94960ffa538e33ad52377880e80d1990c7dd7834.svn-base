package com.webcon.sus.activities;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.webcon.sus.adapter.AlarmListAdapter;
import com.webcon.sus.adapter.AlarmListAdapter.AlarmViewHodler;
import com.webcon.sus.db.AlarmDao;
import com.webcon.sus.demo.R;
import com.webcon.sus.entity.AlarmInfo;
import com.webcon.sus.utils.SUConstant;
import com.webcon.wp.utils.EncrypAES;
import com.webcon.wp.utils.PublicMethodUtil;
import com.webcon.wp.utils.WPApplication;
import com.webcon.wp.utils.WPConstant;

import java.util.ArrayList;
import java.util.List;

/**
 * 报警列表界面
 * @author xj
 *
 * ##FIXME
 */
public class AlarmListFragment extends Fragment {

	private View mView;
	private Context mContext;
	private ListView alarmLV;
	private AlarmListAdapter alarmListAdapter;
	private AlarmDao alarmDao;

	private List<AlarmInfo> alarmInfoList;
	private AlarmInfoListChanageReceiver ailcReceiver;

	private LinearLayout alarmListLL;
	private TextView noneAlarm;
	private RelativeLayout bottomMenuRL;
	private List<AlarmInfo> deleteAlarmList;
	private TextView selectAllTV, deleteTV;
	private boolean isFirstClick = false; // 防止长按listview的item以后也会出发onclick事件
	private String userName; // 当前登陆用户
	private SharedPreferences wpPreferences;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		initView();
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState){
		ViewGroup group = (ViewGroup) mView.getParent();
		if (group != null) {
			group.removeAllViewsInLayout();
		}
		return mView;
	}

	private void initView() {
		LayoutInflater inflater = getActivity().getLayoutInflater();
		mView = inflater.inflate(R.layout.fragment_alarmlist,
				(ViewGroup) getActivity().findViewById(R.id.main_vp_pager),
				false);
		mContext = getActivity();

		wpPreferences = mContext.getSharedPreferences(WPConstant.WP_SETTING, 0);

		// 注册监听报警列表更新的广播
		ailcReceiver = new AlarmInfoListChanageReceiver();
		IntentFilter filter = new IntentFilter();
		filter.addAction(WPConstant.ALARM_INFO_UPDATE_ATION); // 报警信息更新
		mContext.registerReceiver(ailcReceiver, filter);

		alarmLV = (ListView) mView.findViewById(
				R.id.alarm_lv_alarm_listview);
		noneAlarm = (TextView) mView.findViewById(R.id.alarm_tv_none);
		bottomMenuRL = (RelativeLayout) mView.findViewById(
				R.id.alarm_list_bottom_menu);
		selectAllTV = (TextView) mView.findViewById(
				R.id.alarm_list_top_menu_selectall);
		deleteTV = (TextView) mView.findViewById(
				R.id.alarm_list_top_menu_delete);
		alarmListLL = (LinearLayout) mView.findViewById(
				R.id.alarm_ll_alarmlist);

		alarmLV.setOnItemLongClickListener(itemLongClickListener);
		alarmLV.setOnItemClickListener(itemClickListener);
		selectAllTV.setOnClickListener(clickListener);
		deleteTV.setOnClickListener(clickListener);

		userName = EncrypAES.getInstance().decrypt(
				wpPreferences.getString(
						EncrypAES.getInstance().encrypt(WPConstant.USER_NAME),
						EncrypAES.getInstance().encrypt("")));

		alarmDao = new AlarmDao(mContext);

        //初始化时，从本地获取之前的报警消息
		alarmInfoList = alarmDao.alarmSelectAllData(userName);
		deleteAlarmList = new ArrayList<AlarmInfo>();

		if (alarmInfoList.size() > 0) {
			noneAlarm.setVisibility(View.GONE);
			alarmListLL.setVisibility(View.VISIBLE);
		}

		alarmListAdapter = new AlarmListAdapter(mContext, alarmInfoList);
		alarmLV.setAdapter(alarmListAdapter);

	}

	/**
	 * listView列表长点击事件
	 */
	OnItemLongClickListener itemLongClickListener = new OnItemLongClickListener() {

		@Override
		public boolean onItemLongClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
            if(WPApplication.getInstance().DEBUG){
                return true;
            }
			if (bottomMenuRL.getVisibility() != View.VISIBLE) {
				alarmListLL.setPadding(0, 0, 0, PublicMethodUtil.getInstance().px2dip(mContext, 40));
				WPApplication.getInstance().setKeyBackFlag(SUConstant.KEYBACK_TYPE_ALARMS);

				// 显示checkBox
				alarmListAdapter.setSelectCheckBoxFlag(true);
				alarmListAdapter.getIsCheckedList().set(arg2, true);
				deleteAlarmList.add(alarmInfoList.get(arg2));
				alarmListAdapter.notifyDataSetChanged();
				isFirstClick = true;
				// 如果报警列表只有一条报警信息时全选按钮显示为“取消全选”
				if (alarmInfoList.size() == 1) {
					selectAllTV.setText(mContext
									.getString(R.string.str_alarm_list_tv_cancelselectall));
				}
				bottomMenuRL.setVisibility(View.VISIBLE);
			}
			return false;
		}

	};

	/**
	 * listView Item点击事件
	 */
	OnItemClickListener itemClickListener = new OnItemClickListener() {

		@Override
		public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
				long arg3) {
			if (bottomMenuRL.getVisibility() == View.VISIBLE) {
				if (!isFirstClick) {
					AlarmViewHodler holder = (AlarmViewHodler) arg1.getTag();
					holder.selectCB.toggle();
					if (alarmListAdapter.getIsCheckedList().get(arg2)) {
						deleteAlarmList.remove(alarmInfoList.get(arg2));
						alarmListAdapter.getIsCheckedList().set(arg2, false);
					} else {
						deleteAlarmList.add(alarmInfoList.get(arg2));
						alarmListAdapter.getIsCheckedList().set(arg2, true);
					}
					if (alarmListAdapter.isSelectAll()) {
						selectAllTV
								.setText(R.string.str_alarm_list_tv_cancelselectall);
					} else {
						selectAllTV
								.setText(R.string.str_alarm_list_tv_selectall);
					}
				} else {
					isFirstClick = false;
				}
			} else {
				Bundle bundle = new Bundle();
				AlarmInfo alarmInfo = alarmInfoList.get(arg2);
				// 跳转标识 flag 0:程序未启动的情况下从登陆页面直接跳转 1:点击报警列表跳转 2:程序在启动状态下点击通知跳转
				bundle.putInt("alarmDetailedIntentFlag", 1);
				// 保留字段（推送的报警信息里会有，获取的默认填0）
				bundle.putInt("alarmTemp", 0);
				// 报警信息对象
				bundle.putSerializable("alarmData", alarmInfo);

				// 跳转到报警信息详细页面
				Intent intent = new Intent(mContext, AlarmDetailedActivity.class);
				intent.putExtras(bundle);
				mContext.startActivity(intent);
			}
		}

	};

	/**
	 * view点击事件
	 */
	OnClickListener clickListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			if (v == selectAllTV) {
				if (bottomMenuRL.getVisibility() == View.VISIBLE) {
					if (selectAllTV
							.getText()
							.toString()
							.equals(mContext
									.getString(R.string.str_alarm_list_tv_selectall))) {
						alarmListAdapter.selectAll();
						alarmListAdapter.notifyDataSetChanged();
						deleteAlarmList.clear();
						for (int i = 0; i < alarmInfoList.size(); i++) {
							deleteAlarmList.add(alarmInfoList.get(i));
						}
						selectAllTV.setText(R.string.str_alarm_list_tv_cancelselectall);
					} else {
						alarmListAdapter.resetIsCheckedList();
						alarmListAdapter.notifyDataSetChanged();
						deleteAlarmList.clear();
						selectAllTV.setText(R.string.str_alarm_list_tv_selectall);
					}
				}
			} 
			//删除
			else if (v == deleteTV) {
				if (bottomMenuRL.getVisibility() == View.VISIBLE) {
					if (deleteAlarmList.size() > 0) {
						PublicMethodUtil
								.getInstance()
								.makeAlertDialogBuilder(mContext,
										R.string.str_alarm_list_dialog_title,
										R.string.str_alarm_list_dialog_message,
										R.string.btn_ok, R.string.btn_cancle,
										dialogClickListener, null).show();
					} else {
						cancelDelete(false);
					}
				}
			}
		}
	};

	/**
	 * AlartDialog按钮点击监听事件
	 */
	DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {

		@Override
		public void onClick(DialogInterface dialog, int which) {
			// 删除数据  数据库中删除该条记录 报警列表里面移除改记录
			//将选中的记录保存到DELETE表里面
			alarmDao.deleteAlarmInsertOrRelaceData(userName, deleteAlarmList);
			if (alarmDao.alarmDeleteData(userName, deleteAlarmList)) {
				for (int i = 0; i < deleteAlarmList.size(); i++) {
					for (int j = 0; j < alarmInfoList.size(); j++) {
						if (alarmInfoList.get(j).getAlarmEqId().equals(deleteAlarmList.get(i).getAlarmEqId())
								&& alarmInfoList.get(j).getAlarmDateTime().equals(deleteAlarmList.get(i).getAlarmDateTime())
								&& alarmInfoList.get(j).getAlarmType() == deleteAlarmList.get(i).getAlarmType()) {
							alarmInfoList.remove(j);
							break;
						}
					}
				}
			}
			cancelDelete(true);
			if (alarmInfoList.size() == 0) {
				alarmListLL.setVisibility(View.GONE);
				noneAlarm.setVisibility(View.VISIBLE);
			}

			// 发送未处理报警条数更新的广播
			Intent intent = new Intent();
			intent.setAction(WPConstant.NEW_ALARM_NUM_ACTION);
			mContext.sendBroadcast(intent);
		}
	};

	/**
	 * 接收报警信息改变的广播，更新报警信息列表
	 */
	private class AlarmInfoListChanageReceiver extends BroadcastReceiver {
		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			Bundle bundle = new Bundle();
			// 报警信息列表更新
			if (action.equals(WPConstant.ALARM_INFO_UPDATE_ATION)) {
				//System.out.println("----------------处理-------------");
				// 标识，0：处理状态更新 1：新增报警信息
				int alarmUpdateFlag = bundle.getInt("alarmUpdateFlag");
				alarmInfoList.clear();
				alarmInfoList.addAll(alarmDao.alarmSelectAllData(userName));

				if (alarmInfoList.size() > 0) {
					noneAlarm.setVisibility(View.GONE);
					alarmListLL.setVisibility(View.VISIBLE);
				}

				if (bottomMenuRL.getVisibility() == View.VISIBLE) {
					if (alarmUpdateFlag == 1) {
						Toast.makeText(context,
								R.string.str_alarm_list_toast_newalarm,
								Toast.LENGTH_SHORT).show();
					}
					cancelDelete(true);
				} else {
					alarmListAdapter.afterDeleteChangeIsCheckedListSize();
				}

				alarmListAdapter.notifyDataSetChanged();
			}
		}
	}

	@Override
	public void onDestroy() {
		getActivity().unregisterReceiver(ailcReceiver);
		super.onDestroy();
	}

	
	public void onBackPressed() {
		cancelDelete(false);
	}

	
	
	@Override
	public void onPause() {
		cancelDelete(false);
		super.onPause();
	}

	/**
	 * 取消删模式
	 */
	private void cancelDelete(boolean hasDelete) {
		if (bottomMenuRL.getVisibility() == View.VISIBLE) {
			bottomMenuRL.setVisibility(View.INVISIBLE);
			alarmListLL.setPadding(0, 0, 0, 0);
			WPApplication.getInstance().setKeyBackFlag(0);

			deleteAlarmList.clear();
			selectAllTV.setText(mContext
					.getString(R.string.str_alarm_list_tv_selectall));

			// 隐藏checkBox
			alarmListAdapter.setSelectCheckBoxFlag(false);
			// 清除checkBox的选中状态
			if (hasDelete) {
				alarmListAdapter.afterDeleteChangeIsCheckedListSize();
			} else {
				alarmListAdapter.resetIsCheckedList();
			}
			alarmListAdapter.notifyDataSetChanged();
		}
	}
}
