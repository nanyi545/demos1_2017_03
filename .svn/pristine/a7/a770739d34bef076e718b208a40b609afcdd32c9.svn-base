package com.webcon.sus.utils;

import com.webcon.sus.entity.AlarmNode;
import com.webcon.sus.eventObjects.MessageEvent;
import com.webcon.wp.utils.WPApplication;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import de.greenrobot.event.EventBus;

/**
 * @author m
 */
public class AlarmMsgManager {
    public static final String TAG = "AlarmMsgManager";
    public static final int ALARM_MANAGE_SOLVE_REQUEST  = 1;
    public static final int ALARM_MANAGE_SOLVE_RECEIVE  = 2;
    public static final int ALARM_MANAGE_ADD            = 3;
    public static final int ALARM_MANAGE_INIT           = 4;
    public static final int ALARM_MANAGE_DELETE         = 5;

    private static AlarmMsgManager me;
    private ExecutorService pool;

    private AlarmMsgManager(){

    }

    public static AlarmMsgManager getInstance(){
        if(me == null){
            synchronized (AlarmMsgManager.class){
                if(me == null){
                    me = new AlarmMsgManager();
                }
            }
        }
        return me;
    }

    public void release(){
        pool.shutdown();
        pool = null;
    }

    //------------------------------------
    /**
     * ★转发消息通知中心★
     * <p>所有的消息都要经过这里，并且所处理的消息是未处理过的</p>
     * <p>假定：用于转发处理结果、以及发送通知</p>
     * 1.初始化消息
     * 2.新消息
     * 3.发送通知
     * 4.修改表状态
     */
    public void transmitCenter(int type, List<AlarmNode> alarms){
        //暂不经过本地数据库
        //TODO：单任务线程池...看看效果...
        if(pool == null){
            pool = Executors.newSingleThreadExecutor();
        }
        pool.execute(new MyRunn(type, alarms));
    }

    /**
     * 消息处理线程....
     */
    private class MyRunn implements Runnable{
        private int type;
        private List<AlarmNode> alarms;

        public MyRunn(int type, List<AlarmNode> alarms){
            this.type = type;
            this.alarms = alarms;
        }
        @Override
        public void run(){
            switch(type){
                case ALARM_MANAGE_INIT:
                    MessageEvent mEvent = new MessageEvent(MessageEvent.ALARM_FLAG_INIT);
                    EventBus.getDefault().post(mEvent);
                    break;
                case ALARM_MANAGE_SOLVE_REQUEST:
                    if(alarms == null || alarms.size() <= 0){
                        return;
                    }
                    //发送处理请求
                    AlarmNode node = CommunicationUtils.getInstance().requestSolveAlarm(alarms.get(0));
                    if(node == null){
                        node = alarms.get(0);
                    }
                    int stationId = node.getStationId();
                    WPApplication.getInstance().getStationNode(stationId).solvedNewAlarm(node);
                    //发送本地通知
                    MessageEvent eventRefresh = new MessageEvent(MessageEvent.ALARM_FLAG_REFRESH);
                    eventRefresh.stationId = stationId;
                    eventRefresh.alarmId = node.getId();
                    EventBus.getDefault().post(eventRefresh);
                    break;
                case ALARM_MANAGE_SOLVE_RECEIVE:
                    if(alarms == null || alarms.size() <= 0){
                        return;
                    }
                    AlarmNode node2 = alarms.get(0);
                    int stationId2 = node2.getStationId();
                    WPApplication.getInstance().getStationNode(stationId2).solvedNewAlarm(node2);

                    //发送本地通知    //TODO: 是否需要发送一个通知，当其他人处理了一个消息
                    MessageEvent eventRefresh2 = new MessageEvent(MessageEvent.ALARM_FLAG_REFRESH);
                    eventRefresh2.stationId = stationId2;
                    eventRefresh2.alarmId = node2.getId();
                    EventBus.getDefault().post(eventRefresh2);
                    break;
                case ALARM_MANAGE_ADD:

                    break;
                case ALARM_MANAGE_DELETE:

                    break;
                default:
                    break;
            }
        }
    }

}
