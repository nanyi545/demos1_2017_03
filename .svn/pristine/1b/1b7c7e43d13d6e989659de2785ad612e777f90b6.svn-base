package com.webcon.sus.utils;

import android.util.Log;

import com.webcon.sus.entity.AlarmNode;
import com.webcon.sus.entity.StationNode;
import com.webcon.sus.eventObjects.MessageEvent;
import com.webcon.sus.eventObjects.ServiceEvent;
import com.webcon.sus.eventObjects.StationEvent;
import com.webcon.wp.utils.JTools;
import com.webcon.wp.utils.NativeInterface;
import com.webcon.wp.utils.WPApplication;

import de.greenrobot.event.EventBus;

/**
 * 通信库工具类
 * <p>UI层调用这里，在这里调用JNI接口</p>
 * @author m
 */
public class CommunicationUtils extends DataParseUtils{
    private static final String TAG = "Communication";

    private static CommunicationUtils me;
    /** 视频回调接口 */
    private IVideoCallback iVideoCallback;
    private boolean initialized = false;
    /** 保存回复的数据缓存数组 */
    private byte[] rspBuffer = new byte[1024 * 2];

    private CommunicationUtils(){

    }

    public static CommunicationUtils getInstance(){
        if(me == null){
            synchronized (CommunicationUtils.class){
                if(me == null){
                    me = new CommunicationUtils();
                }
            }
        }
        return me;
    }

    /**
     * 注册视频回调监听
     */
    public void registerVideoCallback(IVideoCallback iVideoCallback){
        this.iVideoCallback = iVideoCallback;
    }

    /**
     * 视频预览回调接口
     * @param iDataType 视频数据类型：头部、数据
     * @param pDataBuffer 视频数据
     * @param iDataSize 视频数据大小
     */
    public void onVideoData(int iDataType, byte[] pDataBuffer, int iDataSize){
        iVideoCallback.onData(iDataType, pDataBuffer, iDataSize);
    }

    /**
     * 反注册视频回调监听
     */
    public void unregisterVideoCallback(){
        iVideoCallback = null;
    }

    /**
     * 初始化数据
     */
    public void loadInitialData(){
        if(WPApplication.DEBUG_NO_LOGIN){
            new Thread(){
                @Override
                public void run(){
                    try {
                        sleep(2000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    StationEvent event = new StationEvent(StationEvent.STATION_EVENT_INIT);
                    event.msg = 10;
                    EventBus.getDefault().post(event);
                }
            }.start();
        }else{
            new Thread(new InitRunnble()).start();
        }
    }


    /* ******************** 通信接口调用 ******************** */

    /**
     * 初始化通信库
     */
    public int init(){
        if(DEBUG){
            Log.w(TAG, "init");
        }
        int ret = NativeInterface.getInstance().init();
        initialized = true;
        return ret;
    }

    public boolean isInitialized(){
        return initialized;
    }

    /**
     * 反初始化通信库
     */
    public int uninit(){
        if(DEBUG){
            Log.w(TAG, "uninit");
        }
        int ret = NativeInterface.getInstance().unInit();
        initialized = false;
        return ret;
    }

    /**
     * 登录实现
     * ##FIXME: netType是啥？(눈_눈)
     */
    public int login(String serverIp, int serverPort, byte[] userName, String userPwd, int netType){
        if(DEBUG){
            Log.w(TAG, "login");
        }
        return NativeInterface.getInstance().login(
                serverIp, serverPort, userName, userPwd, SUConstant.USER_TYPE_PHONE, netType);
    }

    /**
     * 退出登录
     */
    public int logout(){
        if(DEBUG){
            Log.w(TAG, "logout");
        }
        registerProcess(false);
        return NativeInterface.getInstance().logout();
    }

    /**
     * 对站场的注册处理：注册/反注册
     */
    private void registerProcess(boolean registerState){
        if(DEBUG){
            Log.w(TAG, "registerProcess");
        }
        short registerType;
        if(!WPApplication.getInstance().isRegister() && registerState){
            registerType = SUConstant.SUB_REQUEST_REGISTER;
        }else if(WPApplication.getInstance().isRegister() && !registerState){
            registerType = SUConstant.SUB_REQUEST_UNREGISTER;
        }else{
            if(DEBUG){
                Log.e(TAG, "错误的注册/反注册操作！");
            }
            return;
        }
        for(StationNode node : WPApplication.getInstance().getStationList()){
            byte[] req = createRequestSys(registerType, node.getId(), null, 0);
            if(req != null){
                int ret = NativeInterface.getInstance().sendDataToWinSys2(
                        SUConstant.PDU_C_CLI_REQ_WIN, req, req.length, rspBuffer, rspBuffer.length);
                if(ret < 0 && !parsePtzRespond(getNewData(rspBuffer, ret)) && DEBUG){// FIXME:pdu出来后再看看
                    Log.e(TAG, "请求注册/反注册失败");
                }
            }
        }
        WPApplication.getInstance().setIsRegister(true);
    }

    /* ********************与站场服务器的连接******************** */
    /**
     * 开启布防
     */
    public void openDefence(int stationId) {
        if(DEBUG){
            Log.w(TAG, "openDefence");
        }
        new Thread(new ButtonRunnable(SUConstant.FLAG_STATION_OPENED, stationId)).start();
    }

    /**
     * 关闭布防
     */
    public void closeDefence(int stationId){
        if(DEBUG){
            Log.w(TAG, "closeDefence");
        }
        new Thread(new ButtonRunnable(SUConstant.FLAG_STATION_CLOSED, stationId)).start();
    }

    /**
     * 播放语音喊话
     */
    public void sendVoice(int stationId, String monitorName, byte[] data, int length){
        if(DEBUG){
            Log.w(TAG, "sendVoice");
        }
        byte[] head = createRequestSys(SUConstant.SUB_REQUEST_SPEAKER, stationId, monitorName, 0);
        if(head != null){
            byte[] sendData = new byte[head.length + 4 + length];
            int offset = head.length;
            // 数据长度
            JTools.IntToBytes4(length, sendData, offset);
            offset += 4;
            // 语音数据
            System.arraycopy(data, 0, sendData, offset, data.length);
            NativeInterface.getInstance().sendDataToWinSys(
                    SUConstant.CALLBACK_PDU_DATA_TYPE_M, SUConstant.PDU_C_CLI_REQ_WIN, sendData, sendData.length);
        }
    }

    /**
     * 接收到回调数据后，给站场服务器的回复（基本上是对新报警消息的回复）
     */
    public void respondWin(short socket1, short socket2, short rspRet){
        if(DEBUG){
            Log.w(TAG, "respondWin");
        }
        byte[] rsp = CommunicationUtils.getInstance().createRspToWin(socket1, socket2, rspRet);
        NativeInterface.getInstance().sendDataToWinSys(SUConstant.CALLBACK_PDU_DATA_TYPE_RSP,
                SUConstant.PDU_B_CLI_RSP_WIN, rsp, rsp.length);
    }

    /**
     * 接收到回调数据后，回复给中心服务器
     */
    public void respondServer(short ret){
        if(DEBUG){
            Log.w(TAG, "respondServer");
        }
        byte[] rsp = CommunicationUtils.getInstance().createRspToServer(ret);
        NativeInterface.getInstance().sendDataToCenterServ(SUConstant.CALLBACK_PDU_DATA_TYPE_RSP,
                SUConstant.PDU_D_CLI_REQ_SERVER, rsp, rsp.length);
    }

    /**
     * 云台控制
     */
    public void requestPtz(int stationId, String monitorName, int ptzType, boolean ptzState){
        if(DEBUG){
            Log.w(TAG, "requestPtz");
        }
        if(ptzType > 0){
            int ptzCode = CommonUtils.mergeIntData(ptzType,
                    ptzState ? SUConstant.PTZ_STATE_MOVING : SUConstant.PTZ_STATE_STAY);
            byte[] req = createRequestSys(SUConstant.SUB_REQUEST_PTZ, stationId, monitorName, ptzCode);
            if(req != null){
                int ret = NativeInterface.getInstance().sendDataToWinSys2(
                        SUConstant.PDU_C_CLI_REQ_WIN, req, req.length, rspBuffer, rspBuffer.length);
                if(ret >= 0){
                    parsePtzRespond(getNewData(rspBuffer, ret));
                }
            }
        }
    }

    /**
     * 对设备的请求
     */
    public int requestPtzDevice(short pdu, byte[] req){
        if(DEBUG){
            Log.w(TAG, "requestPtzDevice: " + pdu);
        }
        int ret = NativeInterface.getInstance().sendDataToWinSys2(pdu, req, req.length, rspBuffer, rspBuffer.length);
        if(ret >= 0){
            parsePtzRespond(getNewData(rspBuffer, ret));
        }
        return ret;
    }

    /**
     * 请求处理一条消息
     * <br>·若请求成功，则返回0
     * <br>·若请求失败，-1.连接错误，-2.已被处理
     * @param mNode 待处理报警消息
     */
    public boolean requestSolveAlarm(AlarmNode mNode){
        if(DEBUG){
            Log.w(TAG, "requestSolveAlarm");
        }
        if(WPApplication.DEBUG_NO_ALARM){
            return true;
        }

        byte[] req = createRequestSys(
                SUConstant.SUB_REQUEST_PROCESS_ALARM, mNode.getStationId(), mNode.getDeviceName(), 0);
        if(req != null){
            int ret = NativeInterface.getInstance().sendDataToWinSys2(
                    SUConstant.PDU_C_CLI_REQ_WIN, req, req.length, rspBuffer, rspBuffer.length);
            if(ret >= 0){
                return parsePtzRespond(getNewData(rspBuffer, ret));
            }
        }
        return false;
    }

    /**
     * 请求DB修改用户昵称
     */
    public boolean requestModifyUserName(String userId, String newNickname){
        if(DEBUG){
            Log.w(TAG, "requestModifyUserName");
        }
        byte[] req = createRequestBDModifyUserName(userId, newNickname);
        if(req != null && req.length > 0){
            int ret = NativeInterface.getInstance().getDBData(
                    SUConstant.PDU_A_CLI_REQ_DB, req, req.length, rspBuffer, rspBuffer.length);
            if(DEBUG){
                Log.w(TAG, "result:" + ret);
            }
            if(ret >= 0){
                return parseDBRsp(getNewData(rspBuffer, ret));
            }
        }
        return false;
    }

    /**
     * 请求DB修改用户密码
     */
    public boolean requestModifyUserPasswd(String userId, String oldPass, String newPass){
        if(DEBUG){
            Log.w(TAG, "requestModifyUserPasswd");
        }
        byte[] req = createRequestBDModifyPasswd(userId, oldPass, newPass);
        if(req != null && req.length > 0){
            int ret = NativeInterface.getInstance().getDBData(
                    SUConstant.PDU_A_CLI_REQ_DB, req, req.length, rspBuffer, rspBuffer.length);
            if(DEBUG){
                Log.w(TAG, "result:" + ret);
            }
            if(ret >= 0){
                return parseDBRsp(getNewData(rspBuffer, ret));
            }
        }
        return false;
    }

    /**
     * 请求修改站场名称 （未实现）
     */
    public boolean requestModifyStationName(byte[] req){
        if(DEBUG){
            Log.w(TAG, "requestModifyStationName");
        }
        if(req != null && req.length > 0){
            int ret = NativeInterface.getInstance().sendDataToWinSys2(
                    SUConstant.PDU_C_CLI_REQ_WIN, req, req.length, rspBuffer, rspBuffer.length);
            if(ret >= 0){
                return parsePtzRespond(getNewData(rspBuffer, ret));
            }
        }
        return false;
    }

    /**
     * 请求刷新站场数据，包括设备信息、报警消息
     * @param stationId 站场Id
     */
    public synchronized void requestRefreshStationInformation(int stationId){
        if(DEBUG){
            Log.w(TAG, "requestRefreshStationInformation");
        }
        int ret;
        /* 获取设备列表 */
        byte[] reqDevices = createRequestSys(SUConstant.SUB_REQUEST_GET_DEVICES, stationId, null, 0);
        if(reqDevices == null){
            if(DEBUG){
                Log.e(TAG, "req is null");
            }
            return;
        }
        ret = NativeInterface.getInstance().sendDataToWinSys2(
                SUConstant.PDU_C_CLI_REQ_WIN,
                reqDevices, reqDevices.length,
                rspBuffer, rspBuffer.length);
        if(ret < 0){
            logError(ret, 1300);
            return;
        }
        if(DEBUG){
            Log.w(TAG, "ret:" + ret);
        }
        //#解析结果
        if(!parseInit(getNewData(rspBuffer, ret), WPApplication.getInstance().getStationNode(stationId))){
            if(DEBUG){
                Log.e(TAG, "解析站场设备错误！");
            }
        }

        /* 获取报警列表 */
        byte[] reqAlarm = createRequestSys(SUConstant.SUB_REQUEST_GET_ALARMS, stationId, null, 0);
        if(reqAlarm == null){
            if(DEBUG){
                Log.e(TAG, "req is null");
            }
            return;
        }
        ret = NativeInterface.getInstance().sendDataToWinSys2(
                SUConstant.PDU_C_CLI_REQ_WIN,
                reqAlarm, reqAlarm.length,
                rspBuffer, rspBuffer.length);
        if(ret < 0){
            logError(ret, 1400);
            return;
        }
        //#解析结果
        if(!parseInit(getNewData(rspBuffer, ret), WPApplication.getInstance().getStationNode(stationId))){
            if(DEBUG){
                Log.e(TAG, "解析报警消息错误！");
            }
        }
    }

    /**
     * 刷新全部站场列表的数据：①初始化时；②站场离线状态改变时
     * 然后重新生成全局报警消息列表
     * 刷新数据后，还需发布事件，刷新显示
     */
    public void refreshAllStationInformation(){
        if(DEBUG){
            Log.w(TAG, "refreshAllStationInformation");
        }
        if(!WPApplication.getInstance().getAccessable()){
            return;
        }
        for(StationNode node : WPApplication.getInstance().getStationList()){
            node.refreshInformation();
        }
        // 生成全局报警消息列表
        WPApplication.getInstance().rebuildAlarmList();
        // 注意设备名和站场id的映射表
    }

    /* ********************** 其他 ****************** */
    /**
     * 释放工作
     * <p>反初始化、清理内存等。。。</p>
     */
    public void release(){

    }


    public byte[] getNewData(byte[] data, int len){
        if(len == 0){
            len = data.length;
        }
        byte[] newData = new byte[len];
        System.arraycopy(data, 0, newData, 0, len);
        return newData;
    }

    private String[] getServerIds(){
        if(!WPApplication.getInstance().getAccessable()){
            return null;
        }
        String[] servers = new String[WPApplication.getInstance().getStationList().size()];
        int i = 0;
        // NOTE：此处不能很好地处理进程退出时数据读取的问题
        for(StationNode n : WPApplication.getInstance().getStationList()){
            servers[i++] = n.getServerId();
        }
        return servers;
    }

    /* ***************************************** Thread ****************************** */
    /**
     * 布防按钮
     */
    private class ButtonRunnable implements Runnable {

        private int ss = 0;
        private int id = 0;

        public ButtonRunnable(int ss, int id){
            this.ss = ss;
            this.id = id;
        }

        @Override
        public void run() {
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            // 测试>>跳过通信
            if(WPApplication.DEBUG_NO_PTZ){
                WPApplication.getInstance().getStationNode(id).setState(ss);
                // 通知站场状态改变事件
                StationEvent event= new StationEvent(StationEvent.STATION_EVENT_REFRESH);
                event.stationId = id;
                event.msg = ss;
                EventBus.getDefault().post(event);
                return;
            }

            // 请求与处理
            boolean ret = false;
            short pdu = (ss == SUConstant.FLAG_STATION_OPENED) ?
                    SUConstant.SUB_REQUEST_OPEN_DEFENCE : SUConstant.SUB_REQUEST_STOP_DEFENCE;
            byte[] req = createRequestSys(pdu, id, null, 0);

            try{
                if(req != null){
                    int result = NativeInterface.getInstance().sendDataToWinSys2(
                            (short) ss, req, req.length, rspBuffer, rspBuffer.length);
                    ret = parsePtzRespond(getNewData(rspBuffer, result));
                }
            }catch(UnsatisfiedLinkError e){
                e.printStackTrace();
            }

            if(ret){
                WPApplication.getInstance().getStationNode(id).setState(ss);
                // 通知站场状态改变事件
                StationEvent event= new StationEvent(StationEvent.STATION_EVENT_REFRESH);
                event.stationId = id;
                event.msg = ss;
                EventBus.getDefault().post(event);
            }else{
                ss = (ss == SUConstant.FLAG_STATION_OPENED) ?
                        SUConstant.FLAG_STATION_CLOSED : SUConstant.FLAG_STATION_OPENED;
                WPApplication.getInstance().getStationNode(id).setState(ss);
                // 通知站场状态改变事件
                StationEvent event= new StationEvent(StationEvent.STATION_EVENT_REFRESH);
                event.stationId = id;
                event.msg = ss;
                EventBus.getDefault().post(event);
                // 错误消息
                CommonUtils.sendErrorEvent(pdu, 0);
            }
        }
    }

    private void logError(int e, int t){
        if(DEBUG){
            Log.e(TAG, "error:" + t + "/" + e);
        }
    }

    /**★☆★☆★☆★☆★☆★☆★☆★☆★
     * 初始化线程：
     */
    private class InitRunnble implements Runnable{

        public InitRunnble(){

        }

        @Override
        public void run(){
            int ret;
            byte[] retData = new byte[1024 * 4];

            if(DEBUG){
                Log.i(TAG, "①>>>>init station list");
            }
            // 向数据库请求站场列表
            byte[] req1 = createRequestBDGetStations();
            if(req1 == null){
                if(DEBUG){
                    Log.e(TAG, "req is null");
                }
                return;
            }
            ret = NativeInterface.getInstance().getDBData(
                    SUConstant.PDU_A_CLI_REQ_DB,
                    req1, req1.length,
                    retData, retData.length);
            if(ret < 0){
                logError(ret, 1100);
                initErrorService();
                return;
            }
            if(DEBUG){
                Log.i(TAG, "ret:" + ret);
            }
            //#解析结果
            if(!parseInit(getNewData(retData, ret), null)){
                if(DEBUG){
                    Log.e(TAG, "解析站场列表错误！");
                }
                initErrorService();
                return;
            }

            //---mytest---------
            if(DEBUG){
                EventBus.getDefault().post(new ServiceEvent(ServiceEvent.SERVICE_EVENT_INIT_OVER));
                //发送通知>>刷新站场列表
                StationEvent event = new StationEvent(StationEvent.STATION_EVENT_INIT);
                event.msg = ret;
                EventBus.getDefault().post(event);
                return;
            }//-----------------------------------

            if(DEBUG){
                Log.i(TAG, "②>>>>init station state");
            }
            // 向服务器请求站场状态
            String[] serverIds = getServerIds();
            if(serverIds == null){
                if(DEBUG){
                    Log.e(TAG, "create serverIds is fail");
                }
                return;
            }
            byte[] req2 = createRequestServerStations(serverIds);
            if(req2 == null){
                if(DEBUG){
                    Log.e(TAG, "req is null");
                }
                return;
            }
            ret = NativeInterface.getInstance().sendDataToCenterServ2(
                    SUConstant.PDU_D_CLI_REQ_SERVER,
                    req2, req2.length,
                    retData, retData.length);
            if(ret < 0){
                logError(ret, 1200);
                return;
            }
            if(DEBUG){
                Log.i(TAG, "ret:" + ret);
            }
            //#解析结果
            if(!parseServerStationsData(getNewData(retData, ret))){
                if(DEBUG){
                    Log.e(TAG, "解析站场状态错误！");
                }
                initErrorService();
            }

            //发送通知>>刷新站场列表
            StationEvent event = new StationEvent(StationEvent.STATION_EVENT_INIT);
            event.msg = ret;
            EventBus.getDefault().post(event);
            //-------


            if(DEBUG){
                Log.i(TAG, "③>>>>register all stations");
            }
            // 向站场请求注册
            registerProcess(true);

            if(DEBUG){
                Log.i(TAG, "④>>>>request all stations");
            }
            // 向站场请求数据：设备列表、报警列表
            refreshAllStationInformation();

            // 初始化完成
            EventBus.getDefault().post(new ServiceEvent(ServiceEvent.SERVICE_EVENT_INIT_OVER));
            //发送请求，刷新，已经加载完设备信息和报警信息
            AlarmMsgManager.getInstance().transmitCenter(MessageEvent.ALARM_FLAG_INIT, null);
        }
    }

    private void initErrorService(){
        EventBus.getDefault().post(new ServiceEvent(ServiceEvent.SERVICE_EVENT_INIT_ERROR));
    }

}
