package com.webcon.sus.utils;

import android.util.Log;

import com.webcon.sus.entity.StationNode;
import com.webcon.sus.eventObjects.MessageEvent;
import com.webcon.sus.eventObjects.StationEvent;
import com.webcon.wp.utils.NativeInterface;
import com.webcon.wp.utils.WPApplication;

import java.util.Random;

import de.greenrobot.event.EventBus;

/**
 * 通信库工具类
 * <p>UI层调用这里，在这里调用JNI接口</p>
 * @author m
 */
public class CommunicationUtils extends DataParseUtils{
    private static final String TAG = "Communication";
    /* variable */
    /** 实例 */
    private static CommunicationUtils my;
    /** 视频回调接口 */
    private IVideoCallback iVideoCallback;
    private boolean initialized = false;


    /* ************ */

    /** 通信工具类，包装了通信的发送处理，以及回调解析处理 */
    private CommunicationUtils(){
//        EventBus.getDefault().register(this);
    }

    /** 返回单例 */
    public static CommunicationUtils getInstance(){
        if(my == null){
            synchronized (CommunicationUtils.class){
                if(my == null){
                    my = new CommunicationUtils();
                }
            }
        }
        return my;
    }

    /**
     * 注册视频回调监听
     */
    public void registerVideoCallback(IVideoCallback iVideoCallback){
        this.iVideoCallback = iVideoCallback;
    }

    public void onVideoData(int iRealHandle, int iDataType, byte[] pDataBuffer, int iDataSize){
        iVideoCallback.onData(iRealHandle, iDataType, pDataBuffer, iDataSize);
    }

    /**
     * 反注册视频回调监听
     */
    public void unregisterVideoCallback(){
        iVideoCallback = null;
    }

    /**
     * ##TODO 初始化>>开始
     */
    public void loadInitialData(byte[] name){
        new Thread(new InitRunnble(name)).start();
    }


    //
    public void refreshDeviceList(int stationId){
        new Thread(new LoadingDeviceListRunnable(stationId)).start();
    }


    /* ********************通信接口调用******************** */

    /**
     * 初始化通信库
     */
    public int init(){
        int ret = NativeInterface.getInstance().init();
        initialized = true;
        return ret;
    }

    public boolean isInitialized(){
        return initialized;
    }

    public int uninit(){
        int ret = NativeInterface.getInstance().unInit();
        initialized = false;
        return ret;
    }

    /**
     * 登录实现
     */
    public int login(String serverIp, int serverPort, byte[] userName, String userPwd, int netType){
        return NativeInterface.getInstance().login(serverIp, serverPort, userName, userPwd, 1, netType);
    }

    public int logout(){
        return NativeInterface.getInstance().logout();
    }

    /* ********************与数据库的连接******************** */

    /**
     * 根据用户标识，请求需要的StationId集合
     */
    public void requestStationSet(int userId){

    }

    /* ********************与站场系统服务软件的连接******************** */
    /**
     * 用户加入（上线）
     */
    public void userJoin(int userId){

    }

    /**
     * 用户退出（下线）
     */
    public void userQuit(int userId){

    }

    /**
     * 根据站场ID请求全部的设备记录
     */
    public void requestStationDevices(int stationId){

    }

    /**
     * 根据站场ID请求全部的报警消息
     */
    public void requestStationAlarms(int stationId){

    }

    /**
     * 开启布防
     */
    public void openDefence(int stationId) {
        new Thread(new ButtonRunnable(SUConstant.FLAG_STATION_OPENED, stationId)).start();
    }

    /**
     * 关闭布防
     */
    public void closeDefence(int stationId){
        new Thread(new ButtonRunnable(SUConstant.FLAG_STATION_CLOSED, stationId)).start();
    }

    /**
     * 开启视频预览
     */
    public int openMonitorPreview(int stationId, String monitorId){

        return 0;
    }

    /**
     * 关闭视频预览
     */
    public int closeMonitorPreview(int stationId, String monitorId){

        return testRet();
    }

    /**
     * 打开预录制语音
     */
    public int openAlarmTrack(int stationId, String monitorId){

        return testRet();
    }

    /**
     * 关闭预录制语音
     */
    public int closeAlarmTrack(int stationId, String monitorId){

        return testRet();
    }

    /**
     * 播放语音喊话
     */
    public int sendVoice(int stationId, String monitorId, byte[] data, int length){

        return testRet();
    }

    /**
     * 云台控制
     */
    public void requestPtz(int stationId, String monitorId, int ptzType, boolean ptzState){
        if(ptzType == -1){
            return;
        }
    }

    /**
     * 对站场的请求
     * <p>有何用？</p>
     */
    public void requestStation(int stationId, int requestCode){

    }

    /**
     * 对站场的修改
     * <p>大概是要改站场名称？</p>
     */
    public void modifyStation(int stationId, String name){

    }


    /* ********************** 其他 ****************** */
    /**
     * 释放工作
     * <p>反初始化、清理内存等。。。</p>
     */
    public void release(){
//        EventBus.getDefault().unregister(this);
    }


    /* ******************** private method ******************** */
    private Random ran = new Random();
    private int testRet(){
        return ran.nextInt(1) - 1;
    }


    /* ***************************************** Thread ****************************** */

    /**
     * 布防按钮
     */
    private class ButtonRunnable implements Runnable {
        private int ss = 0;
        private int id = 0;
        public ButtonRunnable(int ss, int id){
            this.ss = ss;
            this.id = id;
        }

        @Override
        public void run() {
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            WPApplication.getInstance().getStationNode(id).setState(ss);
            StationEvent event= new StationEvent(StationEvent.STATION_EVENT_REFRESH);
            event.stationId = id;
            event.msg = ss;
            EventBus.getDefault().post(event);
        }
    }

    /*--------------------初始化开始      -----------*/
    private void logError(int e, int t){
        Log.e(TAG, "error:" + t + "/" + e);
    }

    /**
     * 初始化线程：
     */
    private class InitRunnble implements Runnable{
        private byte[] name;
        public InitRunnble(byte[] name){
            this.name = name;
        }

        @Override
        public void run(){
            int retLen = 0;
            //①加载全部的站场-----------------------------------------------------------
            /* 步骤：
             * 1：发送一个标识如使用者ID等、以及相应请求，不需要经过服务器软件，但是要经过服务器数据库
             * 2：收到一个包，直接解析，byte[]类型，包含站场消息
             */
            int ret1;
            byte[] retData1 = new byte[0];
            byte[] req1 = DataParseUtils.createRequestHead(SUConstant.REQUEST_STATION_LIST, 0, null);
            //#TODO: 调用接口发送请求
            ret1 = NativeInterface.getInstance().getDBData(
                    SUConstant.PDU_A_CLI_REQ_DB,
                    req1, req1.length,
                    retData1, retLen);
            //#解析结果
            DataParseUtils.parseInitStations(retData1);
            if(ret1 < 0){
                logError(ret1, 1100);
                return;
            }
            //发送通知>>刷新站场列表
            StationEvent event = new StationEvent(StationEvent.STATION_EVENT_INIT);
            event.msg = ret1;
            EventBus.getDefault().post(event);

            //②加载全部的设备信息-----------------------------------------------------------
            /* 步骤：
             * 1.需要一个头部，因为使用了子PDU，向服务软件请求 该站场下的全部设备
             * 2.收到一个包，直接解析，byte[]类型，包含站场下的设备信息
             */
            for(StationNode node : WPApplication.getInstance().getStationList()){
                int ret2 = -1;
                byte[] retData2 = new byte[0];
                byte[] req2 = DataParseUtils.createRequestHead(SUConstant.REQUEST_DEVICE_LIST, node.getIdentifier(), null);
                ret2 = NativeInterface.getInstance().sendDataToWinSys2(
                        SUConstant.PDU_C_CLI_REQ_WIN,
                        req2, req2.length,
                        retData2, retLen
                );
                if(ret2 < 0){
                    logError(ret2, 1200);
                    return;
                }
                //#解析结果
                DataParseUtils.parseInitDevices(node, retData2);
            }


            //③加载全部的报警信息-----------------------------------------------------------
            /* 步骤：
             * 1.需要一个头部，要发送子PDU，首先遍历站场，请求全部设备的未处理报警消息，全部设备名打包为一个请求？
             * 2.收到一个包，直接解析，byte[]类型，包含设备的报警信息，保存到站场结点下
             * 3.最后保存到全局全部未处理报警信息列表
             */
            for(StationNode node : WPApplication.getInstance().getStationList()){
                //解析步骤参考 DoworkService的RequestCameraAlarmUnlineThread线程
                int ret3 = -1;
                byte[] retData3 = new byte[0];
                byte[] req3 = DataParseUtils.createRequestHead(SUConstant.REQUEST_ALARMS_LIST, node.getIdentifier(), null);
                ret3 = NativeInterface.getInstance().sendDataToWinSys2(
                        SUConstant.PDU_C_CLI_REQ_WIN,
                        req3, req3.length,
                        retData3, retLen
                );
                if(ret3 < 0){
                    logError(ret3, 1300);
                    return;
                }
                //#解析结果
                DataParseUtils.parseInitAlarms(node, retData3);
            }
            //生成全局报警消息列表
            WPApplication.getInstance().rebuildAlarmList();
            //发送请求，刷新，已经加载完设备信息和报警信息
            AlarmMsgManager.getInstance().transmitCenter(MessageEvent.ALARM_FLAG_INIT, null);
        }
    }
    /*--------------------初始化结束      -----------*/



    /**
     * 请求获取设备状态
     */
    private class LoadingDeviceListRunnable implements Runnable{
        private int mStationId;

        public LoadingDeviceListRunnable(int stationId){
            this.mStationId = stationId;
        }

        @Override
        public void run(){
            //## TODO 异步加载设备列表

            try {
                Thread.sleep(1200);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            StationEvent event = new StationEvent(StationEvent.STATION_EVENT_REFRESH);
            event.stationId = mStationId;
            EventBus.getDefault().post(event);
            //TODO 发送给stationList页面进行刷新
            //........
        }
    }


    private class RequestRunnable implements Runnable{
        @Override
        public void run(){

        }
    }
}
