package com.webcon.sus.activities;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.Toast;

import com.webcon.sus.adapter.StationListAdapter;
import com.webcon.sus.demo.R;
import com.webcon.sus.entity.StationNode;
import com.webcon.sus.eventObjects.MessageEvent;
import com.webcon.sus.eventObjects.StationEvent;
import com.webcon.wp.utils.ApplicationManager;
import com.webcon.wp.utils.EncrypAES;
import com.webcon.wp.utils.PublicMethodUtil;
import com.webcon.wp.utils.WPApplication;
import com.webcon.wp.utils.WPConstant;

import java.io.UnsupportedEncodingException;
import java.util.List;

import de.greenrobot.event.EventBus;

/**
 * @author m
 */
public class MainStationListFragment extends Fragment {
    private static final String TAG     = "MainStationListFragment";
    public static final String KEY_ID   = "stationId";
    public static final String KEY_PAGE = "viewPagerId";

    private Context mContext;
    private SharedPreferences mPreferences;

    //显示的列表
    private ListView mStationListView;
    private StationListAdapter mStationAdapter;

    /** 加载等待进度条 */
    private ProgressDialog loadListDialog;

    public MainStationListFragment() {
        //TODO ## 构造器
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EventBus.getDefault().register(this);
        init();
        initList();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.fragment_station_list, container, false);
        mStationListView = (ListView) layout.findViewById(R.id.list_stations);
        mStationListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Log.i(TAG, "item clicked!");
                // ##TODO #station列表点击事件，实现跳转 （具体传的值需要再考虑）
                Intent intent = new Intent(mContext, StationDetailsActivity.class);
                Bundle bundle = new Bundle();
                bundle.putInt(KEY_ID, getStationList().get(position).getIdentifier());
                intent.putExtras(bundle);
                startActivity(intent);
            }
        });
        mStationListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                Toast.makeText(mContext, "Long Click", Toast.LENGTH_SHORT).show();
                return true;
            }
        });
        return layout;
    }

    /** 初始化配置 */
    private void init() {
        mContext = getActivity();
        mPreferences = mContext.getSharedPreferences(WPConstant.WP_SETTING, 0);
    }

    /**
     * 加载列表
     */
    public void initList() {
        //等待对话框
        loadListDialog = PublicMethodUtil.getInstance().makeProgressDialog(
                mContext,
                R.string.str_null,
                R.string.str_equipmentlist_loading_tree,
                false,
                false
        );
        if (!loadListDialog.isShowing()) {// && !WPApplication.DEBUG
            loadListDialog.show();
        }
        /* 调用通信接口获取树形列线程 ##发送请求 ##参数为本地用户姓名 */
        //FIXME: 错误！！
//        CommunicationUtils.getInstance().loadInitialData(getLocalUserName());
    }

    /**
     * 刷新界面 (被动)
     */
    public void refreshFragment() {
        if(mStationAdapter == null){
            mStationAdapter = new StationListAdapter(mContext, getStationList());
            mStationListView.setAdapter(mStationAdapter);
        }else{
            refreshAdapter();
        }
    }

    public void refreshAdapter(){
        if(mStationAdapter != null){
            WPApplication.getInstance().refreshStationList();
            mStationAdapter.notifyDataSetChanged();
        }
    }

    /* ##TODO #: 获取对象，排序
     * ##异步加载完数据-->解析完成-->通知刷新-->在adapter之前获取全局变量到本地
     */
    private List<StationNode> getStationList(){
        return WPApplication.getInstance().getStationList();
    }

    /**
     * 获取名称
     * <p>作为唯一标识，向服务器请求数据</p>
     */
    private byte[] getLocalUserName() {
        byte[] userName = null;
        try {
            userName = (EncrypAES.getInstance().decrypt(
                    mPreferences.getString(
                            EncrypAES.getInstance().encrypt(WPConstant.USER_NAME),
                            EncrypAES.getInstance().encrypt(""))) + "\0")
                    .getBytes(WPConstant.STRING_GB2312);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return userName;
    }

    // ##TODO ##待修改-返回键  需要处理finish等
    public void onBackPressed() {

    }


    // ##TODO ----------- 代替了 BroadcastReceiver和 Handler的作用
    // ##在后台完成了数据的接收、解析、数据库处理之后，在此只要调用刷新就行
    public void onEventMainThread(StationEvent event) {
        Log.i(TAG, "receive station list refresh event:" + event.msg);
        switch (event.getType()) {
            case StationEvent.STATION_EVENT_INIT:
                int m = event.msg;
                switch (m) {
                    //NOTE:闪退，并且无法追踪！！
                    case -1:
                        Toast.makeText(
                                mContext,
                                R.string.str_equipmentlist_toask_loadtreefaild,
                                Toast.LENGTH_LONG
                        ).show();
                        // 程序崩溃后直接关闭
                        System.exit(0);
                        break;
                    default:
                        if (m > 0) {
                            refreshFragment();
                        } else {
                            //加载出错
                            new AlertDialog.Builder(mContext)
                                    .setTitle(R.string.str_equipmentlist_alert_treefaild_title)
                                    .setMessage(R.string.str_equipmentlist_alert_treefaild_message)
                                    .setCancelable(false)
                                    .setOnKeyListener(
                                            new DialogInterface.OnKeyListener() {
                                                @Override
                                                public boolean onKey(
                                                        DialogInterface dialog,
                                                        int keyCode,
                                                        KeyEvent event) {
                                                    if (keyCode == KeyEvent.KEYCODE_SEARCH) {
                                                        return true;
                                                    }
                                                    return false;
                                                }
                                            }
                                    )
                                    .setPositiveButton(R.string.str_equipmentlist_alert_treefaild_eixtbt,
                                            new DialogInterface.OnClickListener() {
                                                @Override
                                                public void onClick(DialogInterface dialog, int which) {
                                                    ApplicationManager.getInstance().applicationOtherExit();
                                                    System.exit(0);
                                                }
                                            }).show();
                        }
                        break;
                }//~switch

                // 关闭等待对话框
                if(loadListDialog != null && loadListDialog.isShowing()){
                    loadListDialog.dismiss();
                    loadListDialog.cancel();
                    loadListDialog = null;
                }

//                // TODO #2 发送启动报警判断的广播
//                Intent intent = new Intent();
//                intent.setAction(WPConstant.START_JUDGMENT_SERVICE_ACTION);
//                mContext.sendBroadcast(intent);
                break;
            case StationEvent.STATION_EVENT_REFRESH:
                refreshAdapter();
                break;
            case StationEvent.STATION_EVENT_EXCEPTION:
                //##TODO: 其他异常处理
                break;
            default:
                break;
        }
    }

    public void onEventMainThread(MessageEvent event){
        switch (event.getType()){
            case MessageEvent.ALARM_FLAG_REFRESH:
                //刷新列表
                refreshAdapter();
                break;
            default:
                break;
        }
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
    }

    @Override
    public void onResume(){
        Log.i(TAG, "onResume");
        super.onResume();
    }

    @Override
    public void onDetach() {
        super.onDetach();
    }

    @Override
    public void onDestroy() {
        EventBus.getDefault().unregister(this);
        mContext = null;
        super.onDestroy();
    }

}
