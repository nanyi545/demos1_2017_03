package com.webcon.wp.utils;

/**
 * 通信库的JNI接口类
 * @author Vieboo
 *
 */
public class NativeInterface {
	
	private static NativeInterface nativeInterface;
	
	public static NativeInterface getInstance(){
		if(nativeInterface == null){
			synchronized (NativeInterface.class) {
				if(nativeInterface == null){
					nativeInterface = new NativeInterface();
				}
			}
		}
		return nativeInterface;
	}
	
	static{
		System.loadLibrary("socks5");
		System.loadLibrary("jrtp");
		System.loadLibrary("CommBase");
		System.loadLibrary("NetCtrl");
		System.loadLibrary("FCNetAC");
		System.loadLibrary("myjni");
	}
	
	/**
	 * 初始化
	 * @return	0成功  	<0 失败
	 */
	public native int init();
	
	/**
	 * 反初始化
	 * @return	0成功		<0失败
	 */
	public native int unInit();
	
	/**
	 * 登    陆
	 * @param serverIp		登陆服务器的Ip
	 * @param serverPort		登陆服务器的port
	 * @param userName	登陆的用户账号
	 * @param userPwd	登陆的密码
	 * @param userFlag		用户类型	0    普通用户	1.手机	2.pad	3     监控用户	4    组织用户（信贷，分行）	5    管理员用户
	 * @return 登陆结果	0成功		<0 失败   	-4004 用户号码不存在	    -4005 密码错误
	 */
	public native int login(String serverIp, int serverPort, byte[] userName, 
			String userPwd, int userFlag);
	
	
	/**
	 * 发往数据库的数据、获取数据库数据
	 * @param reqPdu		发送的数据标识
	 * @param inData		发送的数据信息
	 * @param inDataLen		发送数据的长度
	 * @param outData		接收到的数据信息
	 * @param outDataLen	接收到的数据的长度
	 * @return	接收到的数据长度		<0 失败
	 */
	public native int getDBData(short reqPdu, byte[] inData, int inDataLen, 
			byte[] outData, int outDataLen);
	
	
	/**
	 * 发送数据
	 * @param byGid			资源id,非点对点发送时有用,当gid = 0时 用默认资源发送,当gid != 0时只有在FCNetACJoinMeet成功调用之后有效
	 * @param dataType		发送方式(1: 必达控制包 2:聊天文本信息 3:音频数据包或 音视频混合时 4: 视频数据包)
	 * @param jdstUserName	发送的目标用户账户
	 * @param reqPdu		发送请求的命令
	 * @param inData		发送的数据信息
	 * @param inDataLen		发送数据的长度
	 * @param p2pFlag		true 表示 通过p2p发送，false 表示通过转发服务器发送(目前手机默认为false)
	 * @return	0成功		<0 失败	3 正在建立通道 稍后重发
	 */
	public native int sendData(short byGid, short dataType, String jdstUserName, short reqPdu, byte[] inData, int inDataLen, boolean p2pFlag);
	
	
	/**
	 * 发送数据给会议里所有用户
	 * @param byGid	如果发送给当前会议的人员：相应的会议Id  	如果发送给非当前会议的人员：默认0
	 * @param dataType	发送方式(1: 必达控制包 2:聊天文本信息 3:音频数据包或 音视频混合时 4: 视频数据包)	
	 * @param dstUser   发送目标的用户列表数据流,第一字段为short Num,当Num == 0时表示发给会议里所有用户; >0 表示指定用户列表
	 * @param duLen     发送目标用户数据流的长度
	 * @param reqPdu	发送请求的命令
	 * @param inData	发送的数据信息
	 * @param dataLen	发送数据的长度
	 * @return	0成功		<0 失败
	 */
	public native int sendDataToAll(short byGid, short dataType,byte[] dstUser,int duLen, short reqPdu, byte[] inData, int dataLen);
	
	
	/**
	 * 添加好友
	 * @param friendUserList	要添加的好友列表
	 * @param count				要添加的好友的个数
	 * @return	0 成功返回 		<0 失败
	 */
	public native int addFrinedUserInfo(String[] friendUserList, int count);
	
	
	/**
	 * 删除好友
	 * @param friendUserList	要删除的好友列表
	 * @param count				要删除的好友的个数
	 * @return	0 成功返回 		< 0 失败
	 */
	public native int removeFrinedUserInfo(String[] friendUserList, int count);
	
	
	/**
	 * 查询好友用户在线信息
	 * @param count				要查询的好友的个数
	 * @param frientUserList	要查询的好友列表
	 * @param statusList		返回要查询好友列表的结果	1:在线	0：不在线
	 * @return	0 成功返回 		<0 失败
	 */
	public native int findFrinedUserOnLineInfo(int count, String[] frientUserList, int[] statusList);
	
	/**
	 * 查询好友用户在线信息
	 * @param inData	要查找的好友列表流(个数(short) + id(int))
	 * @param inDataLen	传入数据流的长度
	 * @param outData	返回查找结果好友列表流(名称(String)+状态(int))
	 * @param outDataLen 返回数据流的长度(没用)
	 * @return	>0返回的数据长度		 <0 失败
	 */
	public native int findFrinedUserOnLineStatus(byte[] inData, int inDataLen, byte[] outData, int outDataLen);
	
	
	/**
	 * 获取企业ID
	 * @return	>=0 成功返回的企业Id		< 0 失败
	 */
	public native int getCorpId();
	
	
	/**
	 * 创建会议
	 * @param inData 要创建会议的信息流
	 * 			信息输入流顺序  << status_<< flag_ << maxUserNum_ << funcType_ << passwd_ << hostPasswd_ << name_ 
	 * 	   				  << corpId_ << meetingType_ << introduce_ << adminCode_ << dataLen_ << lpdata_
	 * @param inLen 会议信息流的长度
	 * @param outTime 创建超时时间（毫秒）
	 * @return >0就是会议会议ID(gid)   <0创建会议失败
	 */
	public native int CreateMeet(byte[] inData, int inLen, int outTime);
	
	
	/**
	 * 修改会议
	 * @param inData 要修改的会议的信息流
	 * @param inLen	修改会议信息流的长度
	 * @param outTime 修改超时时间（毫秒）
	 * @return ==0 成功  	 < 0 失败
	 */
	public native int ModifyMeet(byte[] inData, int inLen, int outTime);
	
	
	/**
	 * 获取会议列表
	 * @param outData 返回的会议信息流
	 * 				信息输出流顺序  nNum  
	 * 				>> gid_>>status_>> flag_ >> maxUserNum_ >> funcType_ >> passwd_ >> hostPasswd_ >> name_ 
	 * 				>> corpId_ >> meetingType_ >> introduce_ >> adminCode_ >> dataLen_ >> lpdata_
	 * 
	 * @param maxLen 存放返回会议的信息流缓存区的最大长度
	 * @return	>=0是实际的信息流数据长度		<0失败
	 */
	public native int getMeetingList(byte[] outData, int maxLen);
	
	
	/**
	 * 删除会议
	 * @param gid	要删除会议的id
	 * @param outTime	超时时间（毫秒）
	 * @return	==成功  	<0失败
	 */
	public native int DeleteMeet(short gid, int outTime);
	
	
	/**
	 * 加入会议
	 * @param gid	要加入的会议的id
	 * @param pwd	要加入会议的密码
	 * @param outTime	超时时间（毫秒）
	 * @return	==0成功   		<0失败
	 */
	public native int JoinMeet(short gid, String pwd, int outTime);
	
	
	/**
	 * 离开会议
	 * @param gid	当前会议的id
	 * @param outTime	超时时间（毫秒）
	 * @return	==0成功   		<0失败
	 */
	public native int LeaveMeet(short gid, int outTime);
	
	
	/**
	 * 更改自己在指定会议中的状态属性
	 * @param gid	指定的会议
	 * @param status	要改变的状态
	 * @param outTime	超时时间（毫秒）
	 * @return	==0成功   		<0失败
	 */
	public native int modifySelfStatus(short gid, int status, int outTime);
	
	
	/**
	 * 获取系统默认gid
	 * @return > 0 成功gid	  	 < 0 失败
	 */
	public native short getDefaultGId();
	
	/**
	 * 与监控端用户建立点对点关系
	 * @param type	数据类型(1: 必达控制包 2:聊天文本信息 3:音视频数据包 )
	 * @param userId	建立点对点的监控用户帐号
	 * @param outTime	超时时间
	 * @return	== 成功 	<0失败
	 */
	public native int CreateP2P(short type, String userId, int outTime);
	
}
