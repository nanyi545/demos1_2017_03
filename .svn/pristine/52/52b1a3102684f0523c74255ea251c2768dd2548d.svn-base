package com.webcon.sus.entity;


import android.util.Log;

import com.webcon.sus.utils.SUConstant;
import com.webcon.wp.utils.WPApplication;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * 站场结点
 * <p>包括包含设备列表和该站场报警消息列表等数据</p>
 * @author m
 */
public class StationNode implements Comparable<StationNode>{
    private static final String TAG = "StationNode";
    /** 设备列表 */
    private List<BaseDevice> mDevices;
    /** 报警消息列表 */
    private List<AlarmNode> mAlarms;

    /** 调用标识 */
    private int identifier = 0;
    /** 实际ID */
    private String mId = "";
    /** 站场名称 */
    private String mName = "";
    /** 站场地址 */
    private String mAddress = "";
    /** 备注消息(保留) */
    private String mRemark = "";
    /** 是否存活 */
    private boolean isAlive = false;
    /** 新报警消息数量 */
    private int mNewAlarm = 0;
    /** 站场状态：开启、关闭、有新报警 */
    private int mState = SUConstant.FLAG_STATION_CLOSED;


    // getter & setter
    public List<BaseDevice> getDeviceList(){
        if(mDevices == null){
            Log.e("StationNode", "devices list is null");
            throw new NullPointerException();
        }
        return mDevices;
    }

    public void setDeviceList(List<BaseDevice> list){
        this.mDevices = list;
        if(mDevices != null){
            Collections.sort((ArrayList) mDevices);
        }
    }
    public int getIdentifier(){
        return this.identifier;
    }

//    public void setIdentifier(int identifier){
//        this.identifier = identifier;
//    }

    public String getId() {
        return mId;
    }

    public void setId(String id) {
        this.mId = id;
        this.identifier = id.hashCode();
    }

    public int getState() {
        return mState;
    }

    public void setState(int mState) {
        if(mState == SUConstant.FLAG_STATION_OPENED && mNewAlarm != 0){
            mState = SUConstant.FLAG_STATION_ALARM;
        }
        this.mState = mState;
    }

    //--------------------
    /*
     * 报警消息列表的操作:
     * 1.添加、删除新消息
     * 2.处理新消息
     */

    public List<AlarmNode> getAlarmList(){
        refreshAlarmList();
        return mAlarms;
    }

    public void setAlarmList(List<AlarmNode> list){
        this.mAlarms = list;
    }

    public int getNewAlarm() {
        return mNewAlarm;
    }

    public void setNewAlarm(int newAlarm) {
        mNewAlarm = newAlarm;
        if(mState != SUConstant.FLAG_STATION_CLOSED){
            if(newAlarm > 0){
                mState = SUConstant.FLAG_STATION_ALARM;
            }else{
                mState = SUConstant.FLAG_STATION_OPENED;
            }
        }
    }

    /**
     * 处理一条新消息：包括当前消息列表和全局列表的处理
     * <p>感觉这样写逻辑是不是太乱了？？那么以后有时间再来改吧</p>
     */
    public void solvedNewAlarm(int alarmId){
        //FIXME:这个逻辑部分可能需要重新处理，放在一个合理的位置上。。。
        if(!findAlarmArrayAndSolved(mAlarms, alarmId)){
            Log.e(TAG, "not found item in stationList");
            throw new NullPointerException();
        }
        if(!findAlarmArrayAndSolved(WPApplication.getInstance().getAllAlarmList(), alarmId)){
            Log.e(TAG, "not found item in allList");
            throw new NullPointerException();
        }
        //
        WPApplication.getInstance().substractNewAlarm();
        setNewAlarm(mNewAlarm - 1);
        refreshAlarmList();
    }

    public void addNewAlarm(AlarmNode alarm){
        //TODO:有个关于匹配的问题？
        mAlarms.add(alarm);
        setNewAlarm(mNewAlarm + 1);
        //NOTE:初始化之后，报警消息的操作都在指定的Station中的列表进行，自动构建全局列表
        refreshAlarmList();
        WPApplication.getInstance().rebuildAlarmList();
        WPApplication.getInstance().addNewAlarm();
    }

    public void removeAlarm(AlarmNode alarm){
        //TODO:有个关于匹配的问题？
        mAlarms.remove(alarm);
        if(alarm.getIsSolved() == 0){
            solvedNewAlarm(alarm.getId());
        }
        //NOTE:初始化之后，报警消息的操作都在指定的Station中的列表进行，自动构建全局列表
        refreshAlarmList();
        WPApplication.getInstance().rebuildAlarmList();
    }

    public void refreshAlarmList(){
        Collections.sort(mAlarms);
    }

    public int correctNewAlarms(){
        mNewAlarm = 0;
        for(AlarmNode an : mAlarms){
            if(an.getIsSolved() == 0){
                mNewAlarm++;
            }
        }
        return mNewAlarm;
    }

    //------------

    public String getName() {
        return mName;
    }

    public void setName(String mName) {
        this.mName = mName;
    }

    public String getAddress() {
        return mAddress;
    }

    public void setAddress(String mAddress) {
        this.mAddress = mAddress;
    }

    public String getRemark() {
        return mRemark;
    }

    public void setRemark(String mRemark) {
        this.mRemark = mRemark;
    }

    public boolean isAlive() {
        return isAlive;
    }

    public void setAlive(boolean isAlive) {
        this.isAlive = isAlive;
    }

    public boolean isDefend(){
        if(mState == SUConstant.FLAG_STATION_OPENED || mState == SUConstant.FLAG_STATION_ALARM){
            return true;
        }else{
            return false;
        }
    }

    private boolean findAlarmArrayAndSolved(List<AlarmNode> list, int id){
        boolean ret = false;
        for(AlarmNode n : list){
            if(n.getId() == id){
                n.setIsSolved((short)1);
                ret = true;
                break;
            }
        }
        return ret;
    }


    @Override
    public int compareTo(StationNode another) {
        if(another.getState() < mState){
            return -1;
        }else if(another.getState() > mState){
            return 1;
        }else{
            if(another.getIdentifier() > identifier){
                return -1;
            }else if(another.getIdentifier() < identifier){
                return 1;
            }else{
                return 0;
            }
        }
    }

}
