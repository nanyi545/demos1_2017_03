package com.webcon.sus.service;

import android.app.Notification;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.IBinder;
import android.os.PowerManager;
import android.support.v4.app.NotificationCompat;
import android.util.Log;
import android.widget.RemoteViews;
import android.widget.Toast;

import com.webcon.sus.activities.MainActivityCompat;
import com.webcon.sus.demo.R;
import com.webcon.sus.entity.AlarmNode;
import com.webcon.sus.entity.BaseDevice;
import com.webcon.sus.entity.DeviceFactory;
import com.webcon.sus.entity.StationNode;
import com.webcon.sus.eventObjects.StationEvent;
import com.webcon.sus.utils.AlarmMsgManager;
import com.webcon.sus.utils.SUConstant;
import com.webcon.wp.utils.CCallbackMethod;
import com.webcon.wp.utils.LoginLock;
import com.webcon.wp.utils.WPApplication;
import com.webcon.wp.utils.WPConstant;

import java.util.ArrayList;

import de.greenrobot.event.EventBus;

/**
 * @author m
 */
public class CService extends Service {
    private static final String TAG = "CService";
    private static final int FORE_NOTI_ID = 0x314;
    private PowerManager.WakeLock mWakeLock;

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onCreate() {
        Log.w(TAG, "onCreate");
        super.onCreate();
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.w(TAG, "onStartCommand");
        // 启动电量控制锁，保持cpu不睡眠
        PowerManager mPowerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);
        mWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, WPConstant.TAG_WP);
        if (!mWakeLock.isHeld()) {
            mWakeLock.acquire();
        }
        startForeground(FORE_NOTI_ID, createNotice());
        //
        int callbackObj = 0;
        try{
            callbackObj = CCallbackMethod.getInstancs(this).setCallBackObj();
        } catch (UnsatisfiedLinkError e){
            e.printStackTrace();
        }
        Log.i(TAG, "callbackObj: "+ callbackObj);
        if (callbackObj < 0) {
            Toast.makeText(this, R.string.str_dowrokservice_toast_a, Toast.LENGTH_SHORT).show();
        } else {
            new DoworkThread().start();
        }
//        return START_STICKY;
        return START_NOT_STICKY;//NOTE:先不重启，因为没有对崩溃做处理。。。。
    }


    /**
     * doworking....
     */
    private class DoworkThread extends Thread {

        @Override
        public void run() {

            // 解开登陆锁
            LoginLock.getInstance().getUnlock();
            LoginLock.hasLocked = true;

            Log.w("DOWORK", "dowork thread");
            //TODO: remove test---
            testData();
            Log.i(TAG,"----->>---->>----->>----");
            CCallbackMethod.getInstancs(CService.this).doWork(
                    "com/webcon/wp/utils/CCallbackMethod",
                    "onCallback",
                    "callbackBuffer"
            );
            Log.e("DOWORK", "------------------DoworkDead-------------------");
        }
    }

    //--------------------

    @Override
    public void onDestroy() {
        // 释放电量锁
        if (mWakeLock != null && mWakeLock.isHeld()) {
            mWakeLock.release();
            mWakeLock = null;
        }
        stopForeground(true);

        //TODO: 退出清理工作考虑：1.在Application中处理，2.在Service中处理。
        AlarmMsgManager.getInstance().release();
        super.onDestroy();
        Log.w("ServiceExit", "-----------ServiceExit-----------");
    }

    /**
     * 创建一个前台服务通知。。
     */
    private Notification createNotice(){
        NotificationCompat.Builder builder = new NotificationCompat.Builder(this);
        RemoteViews rview = new RemoteViews(getPackageName(), R.layout.remote_layout_notification_1);
        Intent intent = new Intent(this, MainActivityCompat.class);
        PendingIntent pintent = PendingIntent.getActivity(this, 0, intent, 0);

        builder.setContentTitle(getResources().getString(R.string.app_name))
                .setContent(rview)
                .setContentIntent(pintent)
                .setTicker("<--启动无人监控服务-->")
                .setWhen(System.currentTimeMillis())
                .setOngoing(true)
                .setDefaults(Notification.DEFAULT_ALL)
                .setSmallIcon(R.drawable.icon_shield_green);

        return builder.build();
    }


    /* ------------------------------- test ---  -------------------------------------------- */
    /* -------------------------------- test -  --------------------------------------------- */
    /* --------------------------------- test ------------------------------------------------ */
    private BaseDevice getD(int type){
        return DeviceFactory.getInstance().createDevice(type);
    }

    private void testData(){
        Log.i(TAG, "testData");
        //--1--
        StationNode n1 = new StationNode();
        n1.setId("00001");
        n1.setName("AAAAAA");
        n1.setRemark("fruit");
        n1.setState(SUConstant.FLAG_STATION_CLOSED);

        BaseDevice d11 = getD(SUConstant.DEVICE_TYPE_MONITOR);
        d11.setID("001001");
        d11.setName("Orange");
        d11.setIsAvailable(true);
        d11.setIsAlarming(true);
        d11.setStationId(n1.getId());

        BaseDevice d12 = getD(SUConstant.DEVICE_TYPE_RADAR);
        d12.setID("001002");
        d12.setName("Apple");
        d12.setIsAlarming(false);
        d12.setIsAvailable(true);
        d12.setStationId(n1.getId());

        ArrayList<BaseDevice> device1 = new ArrayList<>();
        device1.add(d11);
        device1.add(d12);
        n1.setDeviceList(device1);

        AlarmNode i11 = new AlarmNode();
        i11.setIsSolved((short) 0);
        i11.setDeviceName("Orange");
        i11.setAlarmDate("2015-07-06 18:40:12");
        i11.setDeviceId("001001");
        i11.setAlarmInfo("1");
        i11.setAlarmType((short)2);
        i11.setAlarmDegree("1");
        i11.setStationId(n1.getIdentifier());

        AlarmNode i12 = new AlarmNode();
        i12.setIsSolved((short)0);
        i12.setDeviceName("Apple");
        i12.setAlarmDate("2015-07-03 08:40:12");
        i12.setDeviceId("001002");
        i12.setAlarmInfo("2");
        i12.setAlarmType((short)2);
        i12.setAlarmDegree("1");
        i12.setStationId(n1.getIdentifier());

        AlarmNode i13 = new AlarmNode();
        i13.setIsSolved((short) 0);
        i13.setDeviceName("Apple");
        i13.setAlarmDate("2015-07-04 06:40:12");
        i13.setDeviceId("001002");
        i13.setAlarmInfo("3");
        i13.setAlarmType((short)2);
        i13.setAlarmDegree("2");
        i13.setStationId(n1.getIdentifier());

        ArrayList<AlarmNode> a1 = new ArrayList<>();
        a1.add(i11);
        a1.add(i12);
        a1.add(i13);

        n1.setAlarmList(a1);
        n1.setNewAlarm(a1.size());


        //--2--
        StationNode n2 = new StationNode();
        n2.setId("00002");
        n2.setName("BBBBBB");
        n2.setRemark("tree");
        n2.setState(SUConstant.FLAG_STATION_ALARM);

        BaseDevice d21 = getD(SUConstant.DEVICE_TYPE_MONITOR);
        d21.setID("002001");
        d21.setName("maple");
        d21.setIsAvailable(true);
        d21.setIsAlarming(false);
        d21.setStationId(n2.getId());

        BaseDevice d22 = getD(SUConstant.DEVICE_TYPE_ENTRANCE);
        d22.setID("002002");
        d22.setName("ginkgo");
        d22.setIsAvailable(false);
        d22.setIsAlarming(false);
        d22.setStationId(n2.getId());

        ArrayList<BaseDevice> device2 = new ArrayList<>();
        device2.add(d21);
        device2.add(d22);
        n2.setDeviceList(device2);

        AlarmNode i21 = new AlarmNode();
        i21.setIsSolved((short) 0);
        i21.setDeviceName("maple");
        i21.setAlarmDate("2015-07-02 10:23:12");
        i21.setDeviceId("002001");
        i21.setAlarmInfo("1");
        i21.setAlarmType((short)2);
        i21.setAlarmDegree("1");
        i21.setStationId(n2.getIdentifier());

        AlarmNode i22 = new AlarmNode();
        i22.setIsSolved((short) 0);
        i22.setDeviceName("maple");
        i22.setAlarmDate("2015-07-02 10:12:12");
        i22.setDeviceId("002001");
        i22.setAlarmInfo("2");
        i22.setAlarmType((short)2);
        i22.setAlarmDegree("1");
        i22.setStationId(n2.getIdentifier());

        AlarmNode i23 = new AlarmNode();
        i23.setIsSolved((short) 0);
        i23.setDeviceName("ginkgo");
        i23.setAlarmDate("2015-07-01 12:10:12");
        i23.setDeviceId("002002");
        i23.setAlarmInfo("3");
        i23.setAlarmType((short)2);
        i23.setAlarmDegree("1");
        i23.setStationId(n2.getIdentifier());

        ArrayList<AlarmNode> a2 = new ArrayList<>();
        a2.add(i21);
        a2.add(i22);
        a2.add(i23);

        n2.setAlarmList(a2);
        n2.setNewAlarm(a2.size());


        //--3--
        StationNode n3 = new StationNode();
        n3.setId("00003");
        n3.setName("CCCCCC");
        n3.setRemark("Animal");
        n3.setState(SUConstant.FLAG_STATION_OPENED);

        BaseDevice d31 = getD(SUConstant.DEVICE_TYPE_ENTRANCE);
        d31.setID("003001");
        d31.setName("fox");
        d31.setIsAlarming(true);
        d31.setIsAvailable(true);
        d31.setStationId(n3.getId());

        BaseDevice d32 = getD(SUConstant.DEVICE_TPYE_INFRARED);
        d32.setID("003002");
        d32.setName("cat");
        d32.setIsAlarming(true);
        d32.setIsAvailable(true);
        d32.setStationId(n3.getId());

        ArrayList<BaseDevice> device3 = new ArrayList<>();
        device3.add(d31);
        device3.add(d32);
        n3.setDeviceList(device3);

        AlarmNode i31 = new AlarmNode();
        i31.setIsSolved((short) 0);
        i31.setDeviceName("fox");
        i31.setAlarmDate("2015-07-01 10:10:12");
        i31.setDeviceId("003001");
        i31.setAlarmInfo("1");
        i31.setAlarmType((short)2);
        i31.setAlarmDegree("1");
        i31.setStationId(n3.getIdentifier());

        AlarmNode i32 = new AlarmNode();
        i32.setIsSolved((short) 0);
        i32.setDeviceName("fox");
        i32.setAlarmDate("2015-07-02 20:10:12");
        i32.setDeviceId("003001");
        i32.setAlarmInfo("2");
        i32.setAlarmType((short)2);
        i32.setAlarmDegree("1");
        i32.setStationId(n3.getIdentifier());

        AlarmNode i33 = new AlarmNode();
        i33.setIsSolved((short) 0);
        i33.setDeviceName("cat");
        i33.setAlarmDate("2015-07-07 13:10:12");
        i33.setDeviceId("003002");
        i33.setAlarmInfo("3");
        i33.setAlarmType((short)2);
        i33.setAlarmDegree("1");
        i33.setStationId(n3.getIdentifier());

        AlarmNode i34 = new AlarmNode();
        i34.setIsSolved((short)0);
        i34.setDeviceName("cat");
        i34.setAlarmDate("2015-07-10 23:10:12");
        i34.setDeviceId("003002");
        i34.setAlarmInfo("3");
        i34.setAlarmType((short)2);
        i34.setAlarmDegree("3");
        i34.setStationId(n3.getIdentifier());

        ArrayList<AlarmNode> a3 = new ArrayList<>();
        a3.add(i31);
        a3.add(i32);
        a3.add(i33);
        a3.add(i34);

        n3.setAlarmList(a3);
        n3.setNewAlarm(a3.size());

        ArrayList<StationNode> sn = new ArrayList<>();
        sn.add(n1);
        sn.add(n2);
        sn.add(n3);
        WPApplication.getInstance().setStationList(sn);

        int newSum = 0;
        for(StationNode n : sn){
            newSum += n.getNewAlarm();
        }
        WPApplication.getInstance().setAllNewAlarms(newSum);
        WPApplication.getInstance().rebuildAlarmList();

        new Thread(){
            @Override
            public void run(){
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                StationEvent event = new StationEvent(StationEvent.STATION_EVENT_INIT);
                event.msg = 1;
                EventBus.getDefault().post(event);
                Log.w("Service", "post refresh stations");
                AlarmMsgManager.getInstance().transmitCenter(AlarmMsgManager.ALARM_MANAGE_INIT, null);
            }
        }.start();

    }

}
